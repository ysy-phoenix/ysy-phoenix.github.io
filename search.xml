<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c_week4</title>
      <link href="2021/040438539.html"/>
      <url>2021/040438539.html</url>
      
        <content type="html"><![CDATA[<h1 id="程设作业-week-4"><a href="#程设作业-week-4" class="headerlink" title="程设作业(week 4)"></a>程设作业(week 4)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这可以说是正经发的第一篇博客，就拿程设作业来试试水。其实这是上周作业，但是前两天助教发了一个程序设计规范，我不得不对代码进行重构，sigh！</p><h2 id="A-浮点数的幂"><a href="#A-浮点数的幂" class="headerlink" title="A.浮点数的幂"></a>A.浮点数的幂</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><table><thead><tr><th>Time limit: 10000 ms</th></tr></thead><tbody><tr><td>Memory limit: 256 MB</td></tr><tr><td>Standard I/O</td></tr></tbody></table><p>给定一个 <strong>正浮点数F</strong> 和一个 <strong>正整数n</strong> ，其中：</p><ol><li>F包括小数点固定有“六位”，它会被写成0.1234或 .12300或 00123. 的形式；小数点一定存在，允许前导零、后导零、前导或后导小数点的存在，数值位不会全零。</li><li>n取值范围为1到10（含边界）。<br>求F的n次方的精确值。</li></ol><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入有若干行（不给出具体数目），每行依次包含：</p><ol><li>F，占6列；</li><li>一个空格；</li><li>n，占两列，右对齐，数值不足两列（1到9）用空格补充。</li></ol><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出包括若干行，每行包括一个F的n次方的精确值，但：</p><ol><li>前导零和后导零应被清除，如012.340应以12.34输出；但0.0123应以.0123输出。</li><li>后导小数点应被清除，如12. 应以12输出；但前导小数点，如 .12，必须保留。</li></ol><p><strong>【数据说明】</strong><br>你将被测试所有的输入组合，祝你好运。<br>这里我们强烈建议你使用C的输入输出函数，特别是逐字符输入输出，而非C++的流输入输出。 <strong>你将被分配每个数据点10s的运行时间。</strong><br>函数：</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">#include&lt;stdio.h&gt;int getchar(void);int putchar(int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以逐字符从stdin读取/向stdout输出字符，一般来讲，它比我们常用的scanf要快。但本题的时限应该足以让你使用scanf通过。</p><p>在未知数据组数时如何依次读取：</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">char str[10];int n;while (scanf(&quot;%s%d&quot;, str, &amp;n) &#x3D;&#x3D; 2)&#123;    solve();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">char ch;while ((ch &#x3D; getchar()) !&#x3D; EOF)&#123;    ......&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>请在 <a href="https://zh.cppreference.com/w/c">https://zh.cppreference.com/w/c</a> 查阅关于scanf或getchar返回值的信息，以及宏定义EOF。对于后一种使用getchar()的代码，小心每行的回车符。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-none"><code class="language-none">6.7592  998.999 1000001.  4.00001  4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-none"><code class="language-none">29448126.76412102161816443020690903717327667290429072743629540498.1075960194566517745610440100011.00000000000000000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;cstdio&gt;#include&lt;cstring&gt;int cnt_dot &#x3D; 0, n;int num[5], ans[55],tmp[55];char s[10];void read() &#123;    memset(ans, 0, sizeof(ans));    cnt_dot &#x3D; -1;    while (s[++cnt_dot] !&#x3D; &#39;.&#39;);&#x2F;&#x2F; find the decimal place    for (int i &#x3D; 5; i &gt; cnt_dot; --i)        num[5 - i] &#x3D; s[i] - &#39;0&#39;;    for (int i &#x3D; 0; i &lt; cnt_dot; ++i)        num[4 - i] &#x3D; s[i] - &#39;0&#39;;    cnt_dot &#x3D; 5 - cnt_dot;    cnt_dot *&#x3D; n;&#x2F;&#x2F; cnt_dot is the decimal places of the final result    ans[0] &#x3D; ans[1] &#x3D; 1;&#x2F;&#x2F;ans[0] is the length,store from ans[1]&#125;void mul(int *a, int *b) &#123;&#x2F;&#x2F; multiply a and b, result is stored in b    memset(tmp, 0, sizeof(tmp));    int len_tmp, len &#x3D; b[0];    len_tmp &#x3D; len + 5;    for (int i &#x3D; 0; i &lt; 5; i++)        for (int j &#x3D; 1; j &lt;&#x3D; len; j++)            tmp[i + j] +&#x3D; a[i] * b[j];    for (int i &#x3D; 1; i &lt;&#x3D; len_tmp; i++) &#123;&#x2F;&#x2F;Processing carry        tmp[i + 1] +&#x3D; tmp[i] &#x2F; 10;        tmp[i] %&#x3D; 10;    &#125;    while (tmp[len_tmp] &#x3D;&#x3D; 0 &amp;&amp; len_tmp &gt; 1) --len_tmp;    b[0] &#x3D; len_tmp;    for (int i &#x3D; 1; i &lt;&#x3D; len_tmp; i++)b[i] &#x3D; tmp[i];&#125;void pow(int *a, int exp) &#123;&#x2F;&#x2F; a^exp,the result is stored in ans    while (exp--)mul(a, ans);&#125;void print() &#123;    int start &#x3D; 0;    for (int i &#x3D; ans[0]; i &gt; cnt_dot; --i)&#x2F;&#x2F;print integer part        printf(&quot;%d&quot;, ans[i]);    while (ans[++start] &#x3D;&#x3D; 0);    if (start &lt;&#x3D; cnt_dot) &#123;&#x2F;&#x2F; print decimal part        printf(&quot;.&quot;);        for (int i &#x3D; cnt_dot; i &gt;&#x3D; start; --i)            printf(&quot;%d&quot;, ans[i]);    &#125;    printf(&quot;\n&quot;);&#125;int main() &#123;    while ((scanf(&quot;%s %d&quot;, s, &amp;n)) &#x3D;&#x3D; 2) &#123;        read();        pow(num, n);        print();        getchar();    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这题大致思路是将浮点数的幂转化为高精度乘法，关键是对小数点的处理，以及前缀和后缀的0的输出处理。我并未对这个代码进行任何优化，OJ上跑的时间是13s（毕竟所有数据全输出来也有几十兆）。实际上还是有一些优化思路的，比如说高精压位和快速幂。说到这里就不得不提到课程群里的一些大佬用一些高超的技巧（如FFT(快速傅里叶变换)，手写int128等）对这题进行面向数据（自行体会）编程，最终一位大佬极限的速度是653ms，计科中人竟恐怖如斯！</p><p>为什么代码中会有塑料英语呢，这一点后面会解释。（捂脸）</p><h2 id="B-函数：统计字符串出现次数"><a href="#B-函数：统计字符串出现次数" class="headerlink" title="B.函数：统计字符串出现次数"></a>B.函数：统计字符串出现次数</h2><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>输出每行出现某字符串的次数 每行最多50个字符。</p><h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入n（n&gt;=2）行，第一行为要统计的目标字符串，剩下的n-1行为需要对其进行统计的多行字符串.</p><h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出该字符串在每行出现的次数。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-none"><code class="language-none">ababcabaabab qekgd aba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-none"><code class="language-none">23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-none"><code class="language-none">aaaaaaaaaaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-none"><code class="language-none">34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;cstdio&gt;#include&lt;cstring&gt;char str[53], word[53];int len_w &#x3D; 0, all_end &#x3D; 1, line_end &#x3D; 1;void read() &#123;&#x2F;&#x2F; read one word    char c;    len_w &#x3D; 0;    while ((c &#x3D; getchar()) !&#x3D; &#39; &#39; &amp;&amp; c !&#x3D; &#39;\n&#39; &amp;&amp; c !&#x3D; EOF)        word[len_w++] &#x3D; c;    word[len_w] &#x3D; &#39;\0&#39;;    if (c &#x3D;&#x3D; &#39;\n&#39;)line_end &#x3D; 0;    if (c &#x3D;&#x3D; EOF)line_end &#x3D; all_end &#x3D; 0;&#125;int main() &#123;    scanf(&quot;%s&quot;, str);    int len_s &#x3D; strlen(str);    getchar();    while (all_end) &#123;        int cnt &#x3D; 0;        line_end &#x3D; 1;        while (line_end) &#123;            read();            for (int i &#x3D; 0; i &lt;&#x3D; len_w - len_s; i++) &#123;                &#x2F;&#x2F; count the number of occurrences                int flag &#x3D; 1;                for (int j &#x3D; 0; j &lt; len_s; j++) &#123;                    if (word[i + j] !&#x3D; str[j]) &#123;                        flag &#x3D; 0;&#x2F;&#x2F; not the same                        break;                    &#125;                &#125;                if (flag)cnt++;            &#125;        &#125;        if (all_end) printf(&quot;%d\n&quot;, cnt);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>我为什么会写出这么屑的代码呢，一个是OJ比较屑，gets都用不了，另一个原因是寒假也没碰过c/c++，吃饭的手艺还是不能忘啊。下面放上代码评分规范。</p><h2 id="代码规范评分标准"><a href="#代码规范评分标准" class="headerlink" title="代码规范评分标准"></a>代码规范评分标准</h2><h3 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h3><h4 id="1-1适用范围"><a href="#1-1适用范围" class="headerlink" title="1.1适用范围"></a>1.1适用范围</h4><p>本标准仅适用于C或C++ 语言的编程形式的作业。学生的上机题和大作业等一切编程形式的作业均计入代码规范的考核。</p><h4 id="1-2-分数占比"><a href="#1-2-分数占比" class="headerlink" title="1.2 分数占比"></a>1.2 分数占比</h4><p>学生的代码规范成绩，共占并独占总评的5/100分。</p><h4 id="1-3-计算方法"><a href="#1-3-计算方法" class="headerlink" title="1.3 计算方法"></a>1.3 计算方法</h4><p>1）对代码风格的评价以题目为单位。<br>2）只要有AC提交的题目，不论是否超出该章节的最高满分，均进行考核；未有AC(Accepted)提交的题目，不做评分。<br>（比如，某章上机满分20分，共“A、B、C、D”4题，一题10分；某学生AC过A、C、D题，B题有过提交但没有AC，则他的A、C、D题会进行代码风格的评分）<br>3）对于单个题目的多次AC提交代码，选择代码风格最好的一个，作为该题目的风格得分。<br>学生最后的代码规范成绩，为所有被考核的“题目”的代码风格分平均。学生每个题目的代码风格成绩取0 ~ 5（含边界）的整数，单个题目满分5分，每个细则项可得0或1分；总分为题目得分的平均，满分5分，以精确小数值加入总评的计算。<br>（比如，某学生一学期的题目提交情况与代码风格成绩如下表，空单元格代表未AC：</p><table><thead><tr><th align="center">第一章</th><th></th><th></th><th>第二章</th><th></th><th>第三章</th><th></th><th></th><th></th><th>总分</th></tr></thead><tbody><tr><td align="center">A</td><td>B</td><td>C</td><td>A</td><td>B</td><td>A</td><td>B</td><td>C</td><td>D</td><td></td></tr><tr><td align="center">5</td><td></td><td>4</td><td>3</td><td></td><td>3</td><td>4</td><td></td><td></td><td>3.8</td></tr></tbody></table><p>总分3.8分等于(5+4+3+3+4)÷5，空值不计入平均计算。）</p><h4 id="1-4-评分原则"><a href="#1-4-评分原则" class="headerlink" title="1.4 评分原则"></a>1.4 评分原则</h4><p>为严格要求和引导学生养成良好的编程习惯，同时为成绩评价留有一定的宽松，对每个评分小点，既要严格要求其达到的效果，又对学生的学习过程留有循序渐进的余地；代码风格评判会在严格的评价标准上，结合题目实际，合情合理要求。</p><h3 id="2-评分细则"><a href="#2-评分细则" class="headerlink" title="2.评分细则"></a>2.评分细则</h3><p>关于本细则涉及的语言要求（只能使用英语命名和注释），学生可以从任何程度上借鉴翻译引擎的结果，在保证表意清晰的前提下，允许英语用词和用句的不规范。<br>关于本细则的格式要求，学生可以借鉴IDE等代码编辑器自带的自动格式化工具。</p><h4 id="2-1-缩进、括号、分行与空格（1分）"><a href="#2-1-缩进、括号、分行与空格（1分）" class="headerlink" title="2.1 缩进、括号、分行与空格（1分）"></a>2.1 缩进、括号、分行与空格（1分）</h4><p>以下细则，以学生每部分、每条代码语句的美观性，代码结构的工整性，作为根本评价依据；在每个方面的整体上符合、关键原则上符合、细节上不完全符合，但代码美观性和工整得到保障的，可以得分。<br>对于应当划在本方面的未尽条目，均以美观和工整的要求酌情评判。</p><h5 id="2-1-1-缩进与大括号"><a href="#2-1-1-缩进与大括号" class="headerlink" title="2.1.1 缩进与大括号"></a>2.1.1 缩进与大括号</h5><p>1）学生的代码应以4个空格（或显示为4个字符缩进量的制表符tab）进行缩进。凡是以大括号（{，}）括起的代码块均需缩进。<br>2）分割代码块、函数体、结构体的大括号（{，}），前大括号允许单独分行或紧接块代码之后，二者择一适用；后大括号单独成行。单独分行的前或后大括号自身必须与前一代码块的缩进一致。<br>即，或者使用格式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(void) &#123; if (flag &#x3D;&#x3D; true) &#123;     puts(&quot;YES&quot;); &#125; else &#123;     puts(&quot;NO&quot;); &#125; return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用格式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(void)&#123;    if (flag &#x3D;&#x3D; true)    &#123;        puts(&quot;YES&quot;);    &#125;    else    &#123;        puts(&quot;NO&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种格式在同一代码不得混用。<br>3）if-else分支结构，由于受“最近匹配”原则所可能引起的歧义，只要有if{if-else}else类型的嵌套的，无论下含几条语句，外层均必须使用大括号；switch-case分支结构，case后的处理语句必须缩进，建议添加大括号（下面的例子也可以使用另一种大括号的换行方式）：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (s1.score !&#x3D; s2.score)&#123; &#x2F;&#x2F; this parentheses is critical    if (s1.score &gt; s2.score)        return -1;    else        return 1;&#125;else if (s1.id !&#x3D; s2.id)&#123; &#x2F;&#x2F; so does this    if (s1.id &gt; s2.id)        return 1;    else        return -1;&#125;else    return 0;switch (x) &#123;    case 1:        puts(&quot;1&quot;);        break;    case 2:        puts(&quot;2&quot;);        break;    default: puts(&quot;Other&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-2-分行"><a href="#2-1-2-分行" class="headerlink" title="2.1.2 分行"></a>2.1.2 分行</h5><p>对于较长的行、表达式等，应以分行的方式书写每个部分；典型的如条件表达式和选择（? : ）表达式：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (ch &gt;&#x3D; &#39;a&#39; &amp;&amp; ch &lt;&#x3D; &#39;z&#39; ||    ch &gt;&#x3D; &#39;A&#39; &amp;&amp; ch &lt;&#x3D; &#39;Z&#39; ||    ch &gt;&#x3D; &#39;0&#39; &amp;&amp; ch &lt;&#x3D; &#39;9&#39;)&#123;    ch &#x3D; (ch &gt;&#x3D; &#39;a&#39; &amp;&amp; ch &lt;&#x3D; &#39;z&#39;) ? ch : (         (ch &gt;&#x3D; &#39;A&#39; &amp;&amp; ch &lt;&#x3D; &#39;z&#39;) ? ch + 36 :        &#x2F;*ch &gt;&#x3D; &#39;0&#39; &amp;&amp; ch &lt;&#x3D; &#39;9&#39;*&#x2F;  ch);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-3-小括号"><a href="#2-1-3-小括号" class="headerlink" title="2.1.3 小括号"></a>2.1.3 小括号</h5><p>对于多算符混合使用在同一表达式（包括运算、大小比较、逻辑连接、位运算、赋值、指针引用和解除引用等），除了特别明显、符合数学常识的，有运算次序的组合（与、或、非混用，加减和乘除混用），可以不用括号括起来，其他的均要有括号标识运算顺序和逻辑组合，包括但不限于：<br>1）位运算（&lt;&lt;，&gt;&gt;，&amp;，|，<del>，^）与加减乘除运算混合<br>2）位运算（&lt;&lt;，&gt;&gt;，&amp;，|，</del>，^）与逻辑运算（||,&amp;&amp;,!,!=,==）混合<br>3）赋值（=,+=,-=等）与逻辑运算（||,&amp;&amp;,!,!=,==）混合，比如</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while ((ch &#x3D; getchar()) !&#x3D; EOF)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）指针引用、解引用，结构体成员算符(-&gt;，.)与逻辑运算、递增递减运算（++，–）等混合。虽然：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (*cur++ !&#x3D; &#39;\0&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是常用的组合，但是不如写成：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (*(cur++) !&#x3D; &#39;\0&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）指针引用、解引用与结构体成员算符（-&gt;，.）混合<br>6）选择运算符（? : ）<br>总之，在不能明确表明计算顺序的地方，都要有括号。</p><h5 id="2-1-4-空格"><a href="#2-1-4-空格" class="headerlink" title="2.1.4 空格"></a>2.1.4 空格</h5><p>在算符，逗号等，应使用一个空格分开，保证显示的工整与美观。（for、if等关键字之后，不单独分行的大括号之前等，也建议添加空格）<br>除非，对于诸如长表达式的多级运算符混用时，（在添加了括号的前提下）为了展现运算符优先级结合而选择部分紧凑（如下x=表达式，?:表达式）,然而我们依旧建议添加全部的空格。学生可以借鉴编辑器自带的格式化工具的结果。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;int main(void) &#123; &#x2F;&#x2F; there is a space before &#39;&#123;&#39;    int  x, y, c, t; &#x2F;&#x2F; As problem description indicates    scanf(&quot;%d&quot;, &amp;t);    for (int j &#x3D; 0; j &lt; t; j++) &#123; &#x2F;&#x2F; there are spaces after for and before &#123;        scanf(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;c);        x &#x3D; x*y + y*c - c&#x2F;t;        y &#x3D; (x &amp;&amp; c || x - 1)?(y + 1):(y - 1); &#x2F;&#x2F; spaces before and after ?: are optional, as there are brackets.        if (x &gt; 0) &#123;            puts(&quot;yes&quot;);        &#125; else &#123;            puts(&quot;yes?&quot;);        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-函数头与结构体注释（1分）"><a href="#2-2-函数头与结构体注释（1分）" class="headerlink" title="2.2 函数头与结构体注释（1分）"></a>2.2 函数头与结构体注释（1分）</h4><p>本条目，以是否充分说明函数参数、返回值与结构体成员的意义，作为根本评判依据。意义和用途，（返回值的）一般情况和特殊情况都有涉及，基本可以理解的，可以得分。<br>对于应当划在本方面的未尽条目，均以意义说明完整、明确、规范与充分的要求酌情评判。</p><h5 id="2-2-1-首要原则"><a href="#2-2-1-首要原则" class="headerlink" title="2.2.1 首要原则"></a>2.2.1 首要原则</h5><p>凡是违反本条目下子条目的，扣除本大项的1分：<br>1）注释不允许除英文、伪代码和C表达式以外的其他任何表述方式！包括但不限于汉字、汉语拼音、法语等除英语以外的外语。<br>2）大量充斥着下面明确说明过不应写出的、从代码上可以显然易见的内容。</p><h5 id="2-2-2-函数头注释"><a href="#2-2-2-函数头注释" class="headerlink" title="2.2.2 函数头注释"></a>2.2.2 函数头注释</h5><p>函数头注释应当：<br>1）针对函数的目的，描述函数的作用、副作用和效果。副作用如哪些参数在函数内的改变会影响到函数外（“交换”、“插入”等同类词语也可），如会输出什么等。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* * function: insert data with DATATYPE into a single-linking head-noded L, *           and the new node appears just after header-node. * return value: a pointer to the new node. *&#x2F;struct link_node* link_insert(struct link* L, DATATYPE data) &#123;    struct link_node* new_node &#x3D; malloc(sizeof(struct link_node));    new_node-&gt;data &#x3D; data;    new_node-&gt;next &#x3D; L-&gt;head-&gt;next;    L-&gt;head-&gt;next &#x3D; new_node;    return new_node;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）在返回值不是void时，描述函数返回值的可能性及其对应的含义。同时建议但不强求：对于可能出现的“错误”(内存不足、读取文件尾)会导致什么返回值或其他“标志变量”的设置，也一并注释。（对于返回值应当说明什么，参阅<a href="https://en.cppreference.com/w/c">https://en.cppreference.com/w/c</a> 中对标准库函数的说明。）<br>（比如，strcmp在返回正数、零和负数时分别表示前一字符串大于、等于、小于后一字符串；scanf在返回非负整数时表示正常读取了多少个变量，返回EOF表示在成功读取任何参数之前遇到了文件尾；只要遇到文件尾，feof、ferror会被设置。）<br>3）必要时，如函数头的参数类型与实际使用的类型不同时，补充说明参数变量的实际意义；但在函数定义中可以直接看出的内容，如参数类型、返回值类型、函数名称等，不应出现在注释里。<br>（比如，用于qsort的comp函数的参数是void*类型，但被使用为指向自定义的struct的指针；泛化的定义被局限在特定的使用，需要注释说明）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int comp(const void * p1, const void * p2)&#x2F;** * Introduction:  * Compares two Student objects by score and id. Higher score means &quot;smaller&quot; and vice versa.  * When two student share scores, &quot;smaller&quot; id means &quot;smaller&quot; and vice versa.  * Two Student objects are &quot;equal&quot; only when they share both scores and ids.  *  * Parameters:  * const void * p1, const void * p2, two pointers to Student objects to be compared.  *  * Return value:  * -1 if *p1 is &quot;smaller than&quot; *p2 * 0 if *p1 &quot;equals to&quot; *p2  * 1 if *p2 is &quot;smaller than&quot; *p1 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）必要时，对参数有一定假设的，补充说明该假设；并说明假设不被满足时，会有什么后果。<br>（比如，memcpy要求两个内存范围没有实际的重叠，也不会检查是否重叠；如果重叠了，效果是未定义的，而一般会产生错误）</p><h5 id="2-2-3-结构体注释"><a href="#2-2-3-结构体注释" class="headerlink" title="2.2.3 结构体注释"></a>2.2.3 结构体注释</h5><p>结构体的注释应当表明：<br>1）结构体的用途（如，链表的结点结构体）<br>2）当归属于某一大类数据结构时，属于哪一特定的种类（链表是单链表还是循环链表、是双向链表还是双向循环链表）<br>3）结构体成员的意义（链表的头结点）；即使是OJ题目描述暗示的命名，也应当有所叙述。<br>4）必要时，说明对成员取值范围或其他类型的假定；并说明假定不能满足时的后果。（如，成绩score成员的取值是0到100）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct student DATATYPE;struct link_node &#123;    &#x2F;*     * node type of linking list,     * with DATATYPE as datatype.     *&#x2F;    DATATYPE data;    struct link_node* next;&#125;;struct link &#123;    &#x2F;*     * single linking link list,     * with header node BUT without tail node.     *&#x2F;    struct link_node* head;&#125;;struct student &#123;    &#x2F;*     * information of students.     * member:     *   name: as problem description indicates     *   id: as problem description indicates     *   score: from 0 to 100     *&#x2F;    char name[21];    char id[21];    int score;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但结构体的注释不应当包含成员名称、成员数据类型等从代码显而易见的内容。</p><h4 id="2-3函数、变量、常量与结构体及其成员的命名（1分）"><a href="#2-3函数、变量、常量与结构体及其成员的命名（1分）" class="headerlink" title="2.3函数、变量、常量与结构体及其成员的命名（1分）"></a>2.3函数、变量、常量与结构体及其成员的命名（1分）</h4><p>本条目，以是否满足命名风格（格式）的要求，且是否足够“望文生义”，作为根本评判依据。命名格式按下述条目严格要求；意义是否清晰应当结合变量命名与相关注释，一并评价。<br>对于应当划在本方面的未尽条目，均以含义显然、格式规范的要求酌情评判。</p><h5 id="2-3-1-命名格式"><a href="#2-3-1-命名格式" class="headerlink" title="2.3.1 命名格式"></a>2.3.1 命名格式</h5><p>1）常量命名，包括 #define和const两种常量，均只能使用“大写单词（缩写）+下划线”的形式，如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAX_STUD_NUM 200000const double PI &#x3D; 3.14159<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）变量、结构体、结构体成员和函数命名，推荐使用“纯小写单词（缩写）+下划线”格式（Linux格式）：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int stud_score;char stud_id[20];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用（大/小）驼峰命名：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int studScore; &#x2F;&#x2F; 小驼峰char StudId[20]; &#x2F;&#x2F; 大驼峰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）允许以下划线开头并紧跟着以大写字母开头单词的形式命名结构体，并在随后使用typedef：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct _Student &#123;    int score;    char name[20], id[20];&#125; Student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-2-命名含义"><a href="#2-3-2-命名含义" class="headerlink" title="2.3.2 命名含义"></a>2.3.2 命名含义</h5><p>任何变量、常量、函数、结构体及其成员的名称都应可以直接或比较明白地反映其用途、含义。对于使用单词缩写进行命名的，应当使用适当的注释表明整体意义：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int stud_score; &#x2F;&#x2F; student scorechar StudId[20]; &#x2F;&#x2F; student identification number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用缩写但意义显露不充分，且没有注释的，酌情处理。<br>绝不被允许的命名行为包括：<br>1）使用汉语拼音的命名<br>2）单个字母一类的命名，如a2、b1、c、d等。但如果为了表达常见的数学意义（如x、y、x1），或为了与题目描述一致，或是短小函数或代码段内的常见命名（如使用s指字符串，数值函数的参数x和y，或比较函数的参数a和b），只要是有任何形式的相关注释注解的，可以允许。<br>3）在上一条目的基础上，单个字母变量用于循环迭代的，限定在i、j、k三层；循环多层的，应对每个循环变量的含义予以说明。<br>此外，本细则不强制要求，但推荐使用英文短单词（单音节）的缩写而非全拼（如index，open），推荐不使用下划线甚至双下划线开头的变量命名；因为上述命名时常与C库函数、宏重名。这类变量名一般较为庞杂，初学者不易记忆，暂不规定。<br>对于这类短单词缩写，常见的如ind代index，tot代total，num代number；更推荐的命名方式为与其他含义结合，如stud_num（number of students）等。</p><h4 id="2-4-代码模块化与逻辑注释（1分）"><a href="#2-4-代码模块化与逻辑注释（1分）" class="headerlink" title="2.4 代码模块化与逻辑注释（1分）"></a>2.4 代码模块化与逻辑注释（1分）</h4><p>本条目，以是否清晰展现代码的内在逻辑、执行意义和过程，作为根本评判标准。对于较为短小、步骤较少的代码，在注释、模块划分、使用多种函数等方面不够完美的，只要其逻辑表述充分、运算的目的清楚说明了的，不必深究。对于较长的代码块，有注释注解代码流程，基本清楚的，可以得分。<br>以下各条目应从代码逻辑的易懂性来直观评判，代码易懂的，可以得分；代码不易理解的，可以酌情扣分。<br>对于应当划在本方面的未尽条目，均以代码逻辑清晰与否，酌情评判。</p><h5 id="2-4-1-代码块逻辑"><a href="#2-4-1-代码块逻辑" class="headerlink" title="2.4.1 代码块逻辑"></a>2.4.1 代码块逻辑</h5><p>对于较长的代码/函数段，应使用分行、单行与多行注释等形式，进行划分，并注明代码块的执行过程、目的等。</p><h5 id="2-4-2-循环逻辑"><a href="#2-4-2-循环逻辑" class="headerlink" title="2.4.2 循环逻辑"></a>2.4.2 循环逻辑</h5><p>循环的进入、成功迭代、失败迭代，每次迭代所做的工作等，应有注释予以解释。</p><h5 id="2-4-3-分支逻辑"><a href="#2-4-3-分支逻辑" class="headerlink" title="2.4.3 分支逻辑"></a>2.4.3 分支逻辑</h5><p>以何种情况进入分支，进入分支对应怎样的变量取值行为，及其对应的实际意义。</p><h5 id="2-4-4-运算逻辑"><a href="#2-4-4-运算逻辑" class="headerlink" title="2.4.4 运算逻辑"></a>2.4.4 运算逻辑</h5><p>对于冗长的表达式，包括逻辑判断表达式（if内或while内），运算和赋值表达式，其所要运算或判断的内容，不显然的，应予以说明。</p><h5 id="2-4-5-变量使用逻辑"><a href="#2-4-5-变量使用逻辑" class="headerlink" title="2.4.5 变量使用逻辑"></a>2.4.5 变量使用逻辑</h5><p>对于变量，特别是布尔标志变量（flag等），数组变量（特别是在其某个元素拥有不同的职能，比如将字符串存储为下标从1开始，而下标0的元素存储长度信息），结构体成员；其以什么含义来进行使用，在何种情况下有怎样可能的值的变化的，应在注释里无所不谈。</p><h4 id="2-5-变量、常数与函数的使用（1分）"><a href="#2-5-变量、常数与函数的使用（1分）" class="headerlink" title="2.5 变量、常数与函数的使用（1分）"></a>2.5 变量、常数与函数的使用（1分）</h4><p>本细则涉及变量、常数的使用中应当避免的做法，以及函数编写时应当避免的写法。这些写法或者使得程序出现未定义的危险行为，或者使得程序易错。<br>由于这里的诸多条目与程序的正确性息息相关，而评判的程序为正确程序，故在“规范性”上划分为“可限制”和“不允许”两种。凡是出现“不允许”的代码写法，均扣分；凡是出现“可限制”写法较多的，才考虑扣分；出现大量需要引起注意的写法时，学生应自行考虑其对程序正确性的影响。</p><h5 id="2-5-1-不允许的写法"><a href="#2-5-1-不允许的写法" class="headerlink" title="2.5.1 不允许的写法"></a>2.5.1 不允许的写法</h5><p>1）对任何指针变量的定义处不立即，或邻近语句处不立即初始化的<br>2）类型不同的浮点数（任何不明确指出类型的浮点常量都是double类型）相互进行大小比较的<br>3）非void返回值的函数，可以到达无return值的语句分支的（main函数返回0除外，这是C的标准所规定的）</p><h5 id="2-5-2-可限制的写法"><a href="#2-5-2-可限制的写法" class="headerlink" title="2.5.2 可限制的写法"></a>2.5.2 可限制的写法</h5><p>1）对同类型浮点数使用 ==，&gt;=，&lt;= 等比较运算符的（推荐使用fabs(x-y)&lt;epsilon一类的写法判断浮点数的相等）<br>2）在多个函数之间滥用全局变量交换信息的（递归函数可以视情况例外，但较大的全局数组依旧建议以指针参数的形式传递给函数）<br>3）使用goto语句的（用于一次性跳出多层循环的除外）</p><h5 id="2-5-3-不作为扣分点，但需要引起注意的写法"><a href="#2-5-3-不作为扣分点，但需要引起注意的写法" class="headerlink" title="2.5.3 不作为扣分点，但需要引起注意的写法"></a>2.5.3 不作为扣分点，但需要引起注意的写法</h5><p>1）在指明变量大小（sizeof）处使用数值常量的。（如malloc(n<em>sizeof(int))就不能写成malloc(n</em>4)），这会影响学生代码的可移植性。<br>2）有符号整数的负数取值与无符号整数之间混合运算的<br>3）函数形式参数与实际参数类型不匹配的；特别是对于scanf、printf等可变参数函数，以及涉及不同种指针类型的参数的（将void*指针与其它类型的指针相互赋值除外）。（关于库函数的参数类型，以及类型与scanf格式化字符串对照写法，请参阅<a href="https://en.cppreference.com/w/c%EF%BC%89">https://en.cppreference.com/w/c）</a><br>4）非指针变量的定义处，作为累加用不初始化的，或临近语句处不立即赋初始值的，或变量的定义距离其使用过远的。（C允许在任何代码块定义局部变量，包括for (int i = 0; i &lt; n; i++)）</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>introduction</title>
      <link href="2021/04036818.html"/>
      <url>2021/04036818.html</url>
      
        <content type="html"><![CDATA[<h1 id="微速前进"><a href="#微速前进" class="headerlink" title="微速前进"></a>微速前进</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>搭建这个博客可以说是一时兴起，也不知道能坚持多久，但是我会把这里当成一个家，记录下奋斗过的足迹。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>更新内容包括但不限于CTF知识、工具（脚本）、题解，本科课程相关题解、杂文、随笔等（比如大物实验报告？大作业开源？）。</p>]]></content>
      
      
      <categories>
          
          <category> 总览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 综述 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
