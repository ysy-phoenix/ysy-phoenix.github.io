<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构week3</title>
      <link href="2021/0730301.html"/>
      <url>2021/0730301.html</url>
      
        <content type="html"><![CDATA[<h1 id="Week3树（上）"><a href="#Week3树（上）" class="headerlink" title="Week3树（上）"></a>Week3树（上）</h1><h2 id="3-1-树与树的表示"><a href="#3-1-树与树的表示" class="headerlink" title="3.1 树与树的表示"></a>3.1 树与树的表示</h2><h3 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h3><p><strong>客观世界中许多事物存在层次关系</strong></p><ul><li>类社会家谱</li><li>社会组织结构</li><li>图书信息管理  </li></ul><p><strong>分层次组织在管理上具有更高的效率!</strong>  </p><p>数据管理的基本操作之一： 查找。如何实现有效率的查找？  </p><h3 id="查找（Searching）"><a href="#查找（Searching）" class="headerlink" title="查找（Searching）"></a>查找（Searching）</h3><p><strong>查找：</strong> 根据某个给定<strong>关键字K</strong> ，从<strong>集合R</strong>中找出关键字与<strong>K</strong>相同的记录  </p><p><strong>静态查找：</strong>集合中<strong>记录是固定</strong>的</p><ul><li>没有插入和删除操作，只有查找  </li></ul><p><strong>动态查找：</strong>集合中<strong>记录是动态变化</strong>的</p><ul><li>除查找，还可能发生插入和删除  </li></ul><h3 id="静态查找"><a href="#静态查找" class="headerlink" title="静态查找"></a>静态查找</h3><h4 id="方法1：顺序查找"><a href="#方法1：顺序查找" class="headerlink" title="方法1：顺序查找"></a>方法1：顺序查找</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">SequentialSearch</span><span class="token punctuation">(</span>StaticTable<span class="token operator">*</span> Tbl<span class="token punctuation">,</span>ElementType K<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/*在表Tbl[1]~Tbl[n]中查找关键字为K的数据元素*/</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>Tbl<span class="token operator">-></span>Element<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> K<span class="token punctuation">;</span> <span class="token comment">/*建立哨兵*/</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> Tbl<span class="token operator">-></span>Length<span class="token punctuation">;</span> Tbl<span class="token operator">-></span>Element<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> K<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">/*查找成功返回所在单元下标；不成功返回0*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺序查找算法的时间复杂度为$O(n)$。  </p><h4 id="方法2：二分查找（Binary-Search"><a href="#方法2：二分查找（Binary-Search" class="headerlink" title="方法2：二分查找（Binary Search)"></a>方法2：二分查找（Binary Search)</h4><p>假设n个数据元素的关键字满足有序（<strong>比如：小到大</strong>）<br>$$<br>k_1&lt;k_2&lt;\cdots &lt;k_n<br>$$<br>并且是连续存放（<strong>数组</strong>），那么可以进行二分查找。  </p><p><strong>例</strong> 假设有13个数据元素，按关键字由小到大顺序存放.</p><p>二分查找关健字为<strong>444</strong>的数据元素过程如下：  </p><table><thead><tr><th>5</th><th>16</th><th>39</th><th>45</th><th>51</th><th>98</th><th>100</th><th>202</th><th>226</th><th>321</th><th>368</th><th>444</th><th>501</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td></tr></tbody></table><p>1、 left = 1, right = 13; mid = (1+13)/2 = 7:                     <strong>100 &lt; 444</strong>;</p><p>2、 left = mid+1=8, right = 13; mid = (8+13)/2 = 10:      <strong>321 &lt; 444</strong>;</p><p>3、 left = mid+1=11, right = 13; mid = (11+13)/2 = 12:  <strong>查找结束</strong>;  </p><p><strong>例</strong> 仍然以上面13个数据元素构成的有序线性表为例</p><p>二分查找关健字为 <strong>43</strong> 的数据元素如下：  </p><p>1、 left = 1, right = 13; mid = (1+13)/2 = 7:         <strong>100 &gt; 43</strong>;</p><p>2、 left = 1, right = mid-1= 6; mid = (1+6)/2 = 3: <strong>39 &lt; 43</strong>;</p><p>3、 left = mid+1=4, right = 6; mid = (4+6)/2 = 5: <strong>51 &gt; 43</strong>;</p><p>4、 left = 4, right = mid-1= 4; mid = (4+4)/2 = 4: <strong>45 &gt; 43</strong>;</p><p>5、 left = 4, right = mid-1= 3; <strong>left &gt; right ? 查找失败，结束</strong>;  </p><h5 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span>StaticTable<span class="token operator">*</span> Tbl<span class="token punctuation">,</span> ElementType K<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/*在表Tbl中查找关键字为K的数据元素*/</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> NoFound <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/*初始左边界*/</span>right <span class="token operator">=</span> Tbl<span class="token operator">-></span>Length<span class="token punctuation">;</span> <span class="token comment">/*初始右边界*/</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">/*计算中间元素坐标*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>K <span class="token operator">&lt;</span> Tbl<span class="token operator">-></span>Element<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/*调整右边界*/</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>K <span class="token operator">></span> Tbl<span class="token operator">-></span>Element<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/*调整左边界*/</span><span class="token keyword">else</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">/*查找成功，返回数据元素的下标*/</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> NotFound<span class="token punctuation">;</span> <span class="token comment">/*查找不成功，返回-1*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二分查找算法具有对数的时间复杂度$O(logN)$  </p><ul><li>11个元素的二分查找<strong>判定树</strong>  </li><li>判定树上每个结点需要的查找次数刚好为该结点所在的层数;</li><li>查找成功时查找次数不会超过判定树的深度</li><li>n个结点的判定树的深度为$\lfloor log_2n\rfloor+1$​.</li><li>ASL = （4*4+4*3+2*2+1）/11 = 3  </li></ul><p>二分查找的启示？  </p><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p><strong>树（Tree）</strong> : n（n≥0）个结点构成的有限集合。</p><p>当n=0时，称为<strong>空树</strong>；</p><p>对于任一棵<strong>非空树</strong>（n&gt; 0），它具备以下性质：</p><ul><li>树中有一个称为“<strong>根（Root）</strong> ”的特殊结点， 用 <strong>r</strong> 表示；</li><li>其余结点可分为m（m&gt;0）个<strong>互不相交的</strong>有限集T1， T2， … ， Tm，其中每个集合本身又是一棵树，称为原来树的“<strong>子树</strong>（SubTree）”  </li></ul><h4 id="树与非树"><a href="#树与非树" class="headerlink" title="树与非树?"></a>树与非树?</h4><ul><li>子树是<strong>不相交</strong>的；</li><li>除了根结点外， <strong>每个结点有且仅有一个父结点</strong>；</li><li>一棵N个结点的树有<strong>N-1条边</strong>。</li></ul><h4 id="树的一些基本术语"><a href="#树的一些基本术语" class="headerlink" title="树的一些基本术语"></a>树的一些基本术语</h4><ol><li><strong>结点的度</strong>（Degree）：结点的<strong>子树个数</strong></li><li><strong>树的度</strong>：树的所有结点中最大的度数</li><li><strong>叶结点</strong>（Leaf）： <strong>度为0</strong>的结点</li><li><strong>父结点</strong>（Parent）：有子树的结点是其子树的根结点的父结点</li><li><strong>子结点</strong>（Child）：若A结点是B结点的父结点，则称B结点是A结点的子结点；子结点也称孩子结点。</li><li><strong>兄弟结点</strong>（Sibling）：具有同一父结点的各结点彼此是兄弟结点。  </li><li><strong>路径和路径长度</strong>：从结点$n_1$到$n_k$的<strong>路径</strong>为一个结点序列$n_1 , n_2 ,… , n_k , n_i$是 $n_{i+1}$的父结点。路径所包含边的个数为<strong>路径的长度</strong>。</li><li><strong>祖先结点</strong>(Ancestor)：沿<strong>树根到某一结点路径</strong>上的所有结点都是这个结点的祖先结点。</li><li><strong>子孙结点</strong>(Descendant)：某一结点<strong>的子树中的所有结点</strong>是这个结点的子孙。</li><li><strong>结点的层次</strong>（Level）：规定<strong>根结点在1层</strong>，其它任一结点的层数是其父结点的层数加1。</li><li><strong>树的深度</strong>（Depth） ：树中所有结点中的<strong>最大层次</strong>是这棵树的深度。  </li></ol><h3 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h3><p>儿子-兄弟表示法  。倾斜45度可看做二叉树。</p><h2 id="3-2-二叉树及存储结构"><a href="#3-2-二叉树及存储结构" class="headerlink" title="3.2 二叉树及存储结构"></a>3.2 二叉树及存储结构</h2><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p><strong>二叉树T</strong>：一个有穷的结点集合。</p><ul><li>这个集合<strong>可以为空</strong></li><li>若不为空，则它是由<strong>根结点</strong>和称为其<strong>左子树</strong>$T_L$和<strong>右子树</strong>$T_R$的两个不相交的二叉树组成。</li></ul><p>二叉树具体五种基本形态  </p><p>二叉树的<strong>子树有左右顺序之分</strong>  </p><h4 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h4><p><strong>斜二叉树</strong>（Skewed Binary Tree）  </p><p><strong>完美二叉树</strong>（Perfect Binary Tree） <strong>满二叉树</strong>（Full Binary Tree）  </p><p><strong>完全二叉树</strong>（Complete Binary Tree）有n个结点的二叉树，对树中结点按从上至下、从左到右顺序进行编号，编号为$i(1 ≤ i ≤ n)$结点与满二叉树中编号为$ i$ 结点在二叉树中位置相同  </p><h3 id="二叉树几个重要性质"><a href="#二叉树几个重要性质" class="headerlink" title="二叉树几个重要性质"></a>二叉树几个重要性质</h3><ol><li>一个二叉树第 $i$ 层的最大结点数为： $2^{ i-1}， i \geq 1$。</li><li>深度为k的二叉树有最大结点总数为： $2^ k-1， k \geq 1$。  </li><li>对任何非空二叉树 T，若$n_0$表示叶结点的个数、 $n_2$是度为2的非叶结点个数，那么两者满足关系$n_0 = n_2 +1$。  </li></ol><h4 id="proof"><a href="#proof" class="headerlink" title="proof:"></a>proof:</h4><p>1.第一层最大$2^0=1$，第$i$​层最大$2^{i-1}$。</p><p>2.满二叉树$2^0+2^1+\cdots +2^{k-1}=2^k-1$。</p><p>3.不妨设$n_1$​为度节点为1的叶结点个数，利用算两次原理，考虑边的条数为<br>$$<br>n_0+n_1+n_2-1=n_1+2n_2<br>$$<br>左边表示边为叶结点总数$-1$，右边表示度为一的贡献一条边，度为2的贡献两条边。立得$n_0 = n_2 +1$​。</p><h3 id="二叉树的抽象数据类型定义"><a href="#二叉树的抽象数据类型定义" class="headerlink" title="二叉树的抽象数据类型定义"></a>二叉树的抽象数据类型定义</h3><p><strong>类型名称：二叉树</strong></p><p><strong>数据对象集</strong>： 一个有穷的结点集合。</p><p>若不为空，则由<strong>根结点和其左、右二叉子树</strong>组成。</p><p><strong>操作集</strong>： $B_T \in BinTree, Item \in ElementType$，重要操作有：  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Boolean <span class="token function">IsEmpty</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token comment">// 判别BT是否为空；</span><span class="token keyword">void</span> <span class="token function">Traversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token comment">//遍历，按某顺序访问每个结点；</span>BinTree <span class="token function">CreatBinTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建一个二叉树。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>常用的遍历方法有：</strong>  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token comment">//先序----根、左子树、右子树；</span><span class="token keyword">void</span> <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token comment">//中序---- 左子树、根、右子树；</span><span class="token keyword">void</span> <span class="token function">PostOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token comment">//后序---- 左子树、右子树、根</span><span class="token keyword">void</span> <span class="token function">LevelOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token comment">//层次遍历，从上到下、从左到右</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p>1.<strong>顺序</strong>存储结构  </p><p><strong>完全二叉树</strong>： 按从上至下、从左到右顺序存储$n$个结点的完全二叉树的<strong>结点父子关系</strong>：  </p><p>非根结点（序号 $i &gt; 1$）的父结点的序号是 $\lfloor i / 2\rfloor$;</p><p>结点（序号为 i ）的<strong>左孩子</strong>结点的序号是$ 2i$，（若$2 i \leq n$​​，否则没有左孩子） ；</p><p>结点（序号为 i ）的<strong>右孩子</strong>结点的序号是$ 2i+1$，（若$2 i +1\leq n$，否则没有右孩子） ;  </p><table><thead><tr><th>结点</th><th>A</th><th>B</th><th>O</th><th>C</th><th>S</th><th>M</th><th>Q</th><th>W</th><th>K</th></tr></thead><tbody><tr><td>序号</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr></tbody></table><p><strong>一般二叉树</strong>也可以采用这种结构，但会造成空间浪费……  </p><table><thead><tr><th>结点</th><th>A</th><th>B</th><th>O</th><th>∧</th><th>∧</th><th>M</th><th>∧</th><th>∧</th><th>∧</th><th>∧</th><th>∧</th><th>∧</th><th>C</th></tr></thead><tbody><tr><td>序号</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td></tr></tbody></table><p>2.<strong>链表</strong>存储  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> BinTree<span class="token punctuation">;</span><span class="token keyword">typedef</span> BinTree Position<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">;</span>BinTree Left<span class="token punctuation">;</span>BinTree Right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-二叉树的遍历"><a href="#3-3-二叉树的遍历" class="headerlink" title="3.3 二叉树的遍历"></a>3.3 二叉树的遍历</h2><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>遍历过程为：</p><p>① 访问<strong>根结点</strong>；</p><p>② <strong>先序</strong>遍历其<strong>左子树</strong>；</p><p>③ <strong>先序</strong>遍历其<strong>右子树</strong>。</p><p><strong>A</strong>（ <strong>B</strong> D F E ）（ <strong>C</strong> G H I）</p><p><strong>先序</strong>遍历=&gt; <strong>A B D F E C G H I</strong>  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> BT<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PreOrderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PreOrderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>遍历过程为：</p><p>① <strong>中序</strong>遍历其<strong>左子树</strong>；</p><p>② 访问<strong>根结点</strong>；</p><p>③ <strong>中序</strong>遍历其<strong>右子树</strong>。  </p><p>（D <strong>B</strong> E F） <strong>A</strong> （ G H <strong>C</strong> I）   </p><p><strong>中序</strong>遍历=&gt; <strong>D B E F A G H C I</strong>  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> BT<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>遍历过程为：</p><p>① <strong>后序</strong>遍历其<strong>左子树</strong>；</p><p>② <strong>后序</strong>遍历其<strong>右子树</strong>；</p><p>③ 访问<strong>根结点</strong>。</p><p>（ D E F <strong>B</strong> ）（ H G I <strong>C</strong>） <strong>A</strong></p><p><strong>后序</strong>遍历=&gt; <strong>D E F B H G I C A</strong>  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">PostOrderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PostOrderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> BT<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先序、中序和后序遍历过程：遍历过程中经过结点的路线一样，只是访问各结点的时机不同。  </p><h3 id="二叉树的非递归遍历"><a href="#二叉树的非递归遍历" class="headerlink" title="二叉树的非递归遍历"></a>二叉树的非递归遍历</h3><h4 id="中序遍历非递归遍历算法"><a href="#中序遍历非递归遍历算法" class="headerlink" title="中序遍历非递归遍历算法"></a>中序遍历非递归遍历算法</h4><p>非递归算法实现的基本思路： <strong>使用堆栈</strong>  </p><ul><li>遇到一个结点，就把它压栈，并去遍历它的左子树；</li><li>当左子树遍历结束后，从栈顶弹出这个结点并访问它；</li><li>然后按其右指针再去中序遍历该结点的右子树。  </li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>BinTree T <span class="token operator">=</span> BT<span class="token punctuation">;</span>Stack S <span class="token operator">=</span> <span class="token function">CreatStack</span><span class="token punctuation">(</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*创建并初始化堆栈S*/</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*一直向左并将沿途结点压入堆栈*/</span><span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>T <span class="token operator">=</span> T<span class="token operator">-></span>Left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>T <span class="token operator">=</span> <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*结点弹出堆栈*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*（访问） 打印结点*/</span>T <span class="token operator">=</span> T<span class="token operator">-></span>Right<span class="token punctuation">;</span> <span class="token comment">/*转向右子树*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="先序遍历的非递归遍历算法"><a href="#先序遍历的非递归遍历算法" class="headerlink" title="先序遍历的非递归遍历算法"></a>先序遍历的非递归遍历算法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>BinTree T <span class="token operator">=</span> BT<span class="token punctuation">;</span>Stack S <span class="token operator">=</span> <span class="token function">CreatStack</span><span class="token punctuation">(</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*创建并初始化堆栈S*/</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*一直向左并将沿途结点压入堆栈*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*（访问） 打印结点*/</span><span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>T <span class="token operator">=</span> T<span class="token operator">-></span>Left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>T <span class="token operator">=</span> <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*结点弹出堆栈*/</span>T <span class="token operator">=</span> T<span class="token operator">-></span>Right<span class="token punctuation">;</span> <span class="token comment">/*转向右子树*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历非递归遍历算法"><a href="#后序遍历非递归遍历算法" class="headerlink" title="后序遍历非递归遍历算法"></a>后序遍历非递归遍历算法</h4><p>这里要略复杂些，不是挪动一下printf语句就可以了的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">voidPostOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    BinTree T <span class="token operator">=</span> BT<span class="token punctuation">;</span>    BinTree Exist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Stack S <span class="token operator">=</span> <span class="token function">CreatStack</span><span class="token punctuation">(</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化堆栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>Left <span class="token operator">!=</span> Exist <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>Right <span class="token operator">!=</span> Exist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//是否遍历完，左孩子或右孩子是否已入栈</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从(子)树根向左将结点入栈</span>            T <span class="token operator">=</span> T<span class="token operator">-></span>Left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            T <span class="token operator">=</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//获取栈顶元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Right <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>Right <span class="token operator">!=</span> Exist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//右孩子存在且未入过栈</span>                T <span class="token operator">=</span> T<span class="token operator">-></span>Right<span class="token punctuation">;</span> <span class="token comment">//如果左边最后的结点有右子树,继续上述入栈操作</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                T <span class="token operator">=</span> <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//没有右子树了，就出栈</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读根</span>                Exist <span class="token operator">=</span> T<span class="token punctuation">;</span>              <span class="token comment">//存放已读根的左孩子</span>                T <span class="token operator">=</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取栈顶元素，即返回已读根的父结点</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//难点在于对根的左右孩子是否曾经入过栈的判定，以及栈顶元素的返回时机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>二叉树遍历的核心问题： 二维结构的线性化</p><ul><li>从结点访问其左、右儿子结点</li><li>访问左儿子后，右儿子结点怎么办？</li></ul><p>需要一个存储结构保存暂时不访问的结点</p><p>存储结构：堆栈、队列  </p><p><strong>队列实现</strong>： 遍历从根结点开始，首先将<strong>根结点入队</strong>，然后开始执行循环：结点出队、访问该结点、其左右儿子入队  </p><p><strong>层序基本过程</strong>：先根结点入队，然后：  </p><p>①从队列中<strong>取出一个</strong>元素；</p><p>② <strong>访问</strong>该元素所指结点；</p><p>③ 若该元素所指结点的左、右孩子结点非空，则将其<strong>左、右孩子的指针顺序入队</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LevelOrderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Queue Q<span class="token punctuation">;</span> BinTree T<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BT<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">/* 若是空树则直接返回 */</span>Q <span class="token operator">=</span> <span class="token function">CreatEQueue</span><span class="token punctuation">(</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*创建并初始化队列Q*/</span><span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> BT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>T <span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*访问取出队列的结点*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Left<span class="token punctuation">)</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Right<span class="token punctuation">)</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="例-遍历二叉树的应用：输出二叉树中的叶子结点。"><a href="#例-遍历二叉树的应用：输出二叉树中的叶子结点。" class="headerlink" title="例 遍历二叉树的应用：输出二叉树中的叶子结点。"></a><strong>例</strong> 遍历二叉树的<strong>应用</strong>：输出二叉树中的<strong>叶子结点</strong>。</h4><p>在二叉树的遍历算法中增加检测结点的“ <strong>左右子树是否都为空</strong>”。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrderPrintLeaves</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BT <span class="token operator">-</span> Left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> BT<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PreOrderPrintLeaves</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PreOrderPrintLeaves</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例-求二叉树的高度。"><a href="#例-求二叉树的高度。" class="headerlink" title="例  求二叉树的高度。"></a><strong>例</strong>  求二叉树的<strong>高度</strong>。</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">PostOrderGetHeight</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> HL<span class="token punctuation">,</span> HR<span class="token punctuation">,</span> MaxH<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>HL <span class="token operator">=</span> <span class="token function">PostOrderGetHeight</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*求左子树的深度*/</span>HR <span class="token operator">=</span> <span class="token function">PostOrderGetHeight</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*求右子树的深度*/</span>MaxH <span class="token operator">=</span> <span class="token punctuation">(</span>HL <span class="token operator">></span> HR<span class="token punctuation">)</span> <span class="token operator">?</span> HL <span class="token operator">:</span> HR<span class="token punctuation">;</span> <span class="token comment">/*取左右子树较大的深度*/</span><span class="token keyword">return</span> <span class="token punctuation">(</span>MaxH <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*返回树的深度*/</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 空树深度为0 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例-二元运算表达式树及其遍历"><a href="#例-二元运算表达式树及其遍历" class="headerlink" title="例 二元运算表达式树及其遍历"></a><strong>例</strong> <strong>二元运算</strong>表达式树及其遍历</h4><p>三种遍历可以得到三种不同的访问结果：</p><ul><li>先序遍历得到前缀表达式： + + a * b c * + * d e f g</li><li>中序遍历得到中缀表达式： a + b * c + <strong>d * e</strong> + <strong>f * g</strong></li><li>后序遍历得到后缀表达式： a b c * + d e * f + g * +  </li></ul><p>中缀表达式会受到运算符优先级的影响!</p><h4 id="例-由两种遍历序列确定二叉树"><a href="#例-由两种遍历序列确定二叉树" class="headerlink" title="例 由两种遍历序列确定二叉树"></a><strong>例</strong> 由<strong>两种</strong>遍历序列确定二叉树</h4><p>已知三种遍历中的任意两种遍历序列，能否唯一确定一棵二叉树呢？  </p><p>必须要有中序遍历！</p><p>没有中序的困扰：</p><ul><li>先序遍历序列： A B</li><li>后序遍历序列： B A  </li></ul><h5 id="先序和中序遍历序列来确定一棵二叉树"><a href="#先序和中序遍历序列来确定一棵二叉树" class="headerlink" title="先序和中序遍历序列来确定一棵二叉树"></a>先序和中序遍历序列来确定一棵二叉树</h5><ul><li>根据先序遍历序列第一个结点确定根结点；</li><li>根据根结点在中序遍历序列中分割出左右两个子序列</li><li>对左子树和右子树分别递归使用相同的方法继续分解。  </li></ul><p>类似地， 后序和中序遍历序列也可以确定一棵二叉树。  </p><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TNode</span> <span class="token operator">*</span>Position<span class="token punctuation">;</span><span class="token keyword">typedef</span> Position BinTree<span class="token punctuation">;</span> <span class="token comment">/* 二叉树类型 */</span><span class="token keyword">struct</span> <span class="token class-name">TNode</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* 树结点定义 */</span>    ElementType Data<span class="token punctuation">;</span>     <span class="token comment">/* 结点数据 */</span>    BinTree Left<span class="token punctuation">;</span>         <span class="token comment">/* 指向左子树 */</span>    BinTree Right<span class="token punctuation">;</span>        <span class="token comment">/* 指向右子树 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InorderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">InorderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 此处假设对BT结点的访问就是打印数据 */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> BT<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 假设数据为整型 */</span>        <span class="token function">InorderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> BT<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreorderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostorderTraversal</span><span class="token punctuation">(</span>BT<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> BT<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">LevelorderTraversal</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Queue Q<span class="token punctuation">;</span>    BinTree T<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BT<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">/* 若是空树则直接返回 */</span>    Q <span class="token operator">=</span> <span class="token function">CreatQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 创建空队列Q */</span>    <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> BT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        T <span class="token operator">=</span> <span class="token function">DeleteQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> T<span class="token operator">-></span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 访问取出队列的结点 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Left<span class="token punctuation">)</span>            <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Right<span class="token punctuation">)</span>            <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编程习题"><a href="#编程习题" class="headerlink" title="编程习题"></a>编程习题</h2><h3 id="1-树的同构"><a href="#1-树的同构" class="headerlink" title="1.树的同构"></a><a href="https://pintia.cn/problem-sets/988034414048743424/problems/988039710297038848">1.树的同构</a></h3><p>给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。例如图1给出的两棵树就是同构的，因为我们把其中一棵树的结点A、B、G的左右孩子互换后，就得到另外一棵树。而图2就不是同构的。</p><p><img src="https://images.ptausercontent.com/0c8bbacf-d64e-4c6d-8d4e-1249e33fb0b1.jpg" alt="图1"></p><p><img src="https://images.ptausercontent.com/29" alt="图2"></p><p>现给定两棵树，请你判断它们是否是同构的。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入给出2棵二叉树树的信息。对于每棵树，首先在一行中给出一个非负整数<em>N</em> (≤10)，即该树的结点数（此时假设结点从0到<em>N</em>−1编号）；随后<em>N</em>行，第<em>i</em>行对应编号第<em>i</em>个结点，给出该结点中存储的1个英文大写字母、其左孩子结点的编号、右孩子结点的编号。如果孩子结点为空，则在相应位置上给出“-”。给出的数据间用一个空格分隔。注意：题目保证每个结点中存储的字母是不同的。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>如果两棵树是同构的，输出“Yes”，否则输出“No”。</p><h4 id="输入样例1（对应图1）："><a href="#输入样例1（对应图1）：" class="headerlink" title="输入样例1（对应图1）："></a>输入样例1（对应图1）：</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">8A 1 2B 3 4C 5 -D - -E 6 -G 7 -F - -H - -8G - 4B 7 6F - -A 5 1H - -C 0 -D - -E 2 -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><pre class="line-numbers language-out" data-language="out"><code class="language-out">Yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输入样例2（对应图2）："><a href="#输入样例2（对应图2）：" class="headerlink" title="输入样例2（对应图2）："></a>输入样例2（对应图2）：</h4><pre class="line-numbers language-none"><code class="language-none">8B 5 7F - -A 0 3C 6 -H - -D - -G 4 -E 1 -8D 6 -B 5 -E - -H - -C 0 2G - 3F - -A 1 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h4><pre class="line-numbers language-none"><code class="language-none">No<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先是二叉树的表示，这里考虑吧用结构数组表示二叉树，然后读数据建二叉树，再二叉树同构判别（递归判别）。  </p><p>建二叉树时读数据要注意读换行符，同时利用一个check数组标记是否有节点指向该节点，没有任何节点指向的的节点即为根节点。</p><p>在判别同构时，注意多种情况的讨论:</p><p>1.都是空树，同构。</p><p>2.一空一非空，不同构。</p><p>3.都不空，根节点不一样，不同构。</p><p>4.都没有左子树，递归地判别右子树是否同构。</p><p>5.左子树都非空，且对应的结点值相同，那么递归地判别左右子树是否同构；否则判别左子树与右子树是否同构，右子树与左子树是否同构。</p><p>以上判断要组织好逻辑顺序，做到不重不漏。</p><h4 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxTree</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ElementType</span> <span class="token expression"><span class="token keyword">char</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Tree</span> <span class="token expression"><span class="token keyword">int</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Null</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span></span></span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    ElementType Element<span class="token punctuation">;</span>    Tree Left<span class="token punctuation">;</span>    Tree Right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> T1<span class="token punctuation">[</span>MaxTree<span class="token punctuation">]</span><span class="token punctuation">,</span> T2<span class="token punctuation">[</span>MaxTree<span class="token punctuation">]</span><span class="token punctuation">;</span>Tree <span class="token function">BuildTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> check<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cl<span class="token punctuation">,</span> cr<span class="token punctuation">,</span> row<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> check<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c %c %c%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Element<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">=</span> cl <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                check<span class="token punctuation">[</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">=</span> Null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cr <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Right <span class="token operator">=</span> cr <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                check<span class="token punctuation">[</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Right <span class="token operator">=</span> Null<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>        <span class="token keyword">return</span> Null<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Isomorphic</span><span class="token punctuation">(</span>Tree R1<span class="token punctuation">,</span> Tree R2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>R1 <span class="token operator">==</span> Null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>R2 <span class="token operator">==</span> Null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">/* both empty */</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>R1 <span class="token operator">==</span> Null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>R2 <span class="token operator">!=</span> Null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>R1 <span class="token operator">!=</span> Null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>R2 <span class="token operator">==</span> Null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                                   <span class="token comment">/* one of them is empty */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Element <span class="token operator">!=</span> T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Element<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* roots are different */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">==</span> Null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">==</span> Null<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">/* both have no left subtree */</span>        <span class="token keyword">return</span> <span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">,</span> T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">!=</span> Null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">!=</span> Null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">]</span><span class="token punctuation">.</span>Element<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>T2<span class="token punctuation">[</span>T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">]</span><span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">/* no need to swap the left and the right */</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">,</span> T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">,</span> T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token comment">/* need to swap the left and the right */</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">,</span> T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">,</span> T2<span class="token punctuation">[</span>R2<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Tree R1<span class="token punctuation">,</span> R2<span class="token punctuation">;</span>    R1 <span class="token operator">=</span> <span class="token function">BuildTree</span><span class="token punctuation">(</span>T1<span class="token punctuation">)</span><span class="token punctuation">;</span>    R2 <span class="token operator">=</span> <span class="token function">BuildTree</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Isomorphic</span><span class="token punctuation">(</span>R1<span class="token punctuation">,</span> R2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample 1 有双边换、单边换，节点编号不同但数据同</td><td>答案正确</td><td>7</td><td>3 ms</td><td>196 KB</td></tr><tr><td>1</td><td>sample 2 第3层开始错，每层结点数据对，但父结点不对</td><td>答案正确</td><td>7</td><td>4 ms</td><td>304 KB</td></tr><tr><td>2</td><td>结点数不同</td><td>答案正确</td><td>3</td><td>3 ms</td><td>172 KB</td></tr><tr><td>3</td><td>空树</td><td>答案正确</td><td>2</td><td>4 ms</td><td>172 KB</td></tr><tr><td>4</td><td>只有1个结点，结构同但数据不同</td><td>答案正确</td><td>3</td><td>4 ms</td><td>188 KB</td></tr><tr><td>5</td><td>最大N，层序遍历结果相同，但树不同</td><td>答案正确</td><td>3</td><td>5 ms</td><td>176 KB</td></tr></tbody></table><h3 id="2-List-Leaves"><a href="#2-List-Leaves" class="headerlink" title="2.List Leaves"></a><a href="https://pintia.cn/problem-sets/16/problems/666">2.List Leaves</a></h3><p>Given a tree, you are supposed to list all the leaves in the order of top down, and left to right.</p><h4 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤10) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to <em>N</em>−1. Then <em>N</em> lines follow, each corresponds to a node, and gives the indices of the left and right children of the node. If the child does not exist, a “-“ will be put at the position. Any pair of children are separated by a space.</p><h4 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print in one line all the leaves’ indices in the order of top down, and left to right. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">81 -- -0 -2 7- -- -5 -4 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">4 1 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>一句话概括题意就是层序遍历输出叶结点，在层序遍历的基础上加一个判断叶结点即可，需要简单修改队列模板。建树过程和上题几乎一致，就不赘述。注意格式，结尾不要有多余空格即可。</p><h4 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxTree</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Tree</span> <span class="token expression"><span class="token keyword">int</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Null</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>BinTree<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    Tree Left<span class="token punctuation">;</span>    Tree Right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> T1<span class="token punctuation">[</span>MaxTree<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span> <span class="token expression"><span class="token constant">NULL</span></span></span><span class="token keyword">typedef</span> BinTree ElementType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Position<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token punctuation">&#123;</span>    ElementType <span class="token operator">*</span>Data<span class="token punctuation">;</span>    <span class="token comment">/* 存储元素的数组 */</span>    Position Front<span class="token punctuation">,</span> Rear<span class="token punctuation">;</span> <span class="token comment">/* 队列的头、尾指针 */</span>    <span class="token keyword">int</span> MaxSize<span class="token punctuation">;</span>          <span class="token comment">/* 队列最大容量 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token operator">*</span>Queue<span class="token punctuation">;</span>Queue <span class="token function">CreateQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> MaxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Queue Q <span class="token operator">=</span> <span class="token punctuation">(</span>Queue<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">QNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>Data <span class="token operator">=</span> <span class="token punctuation">(</span>ElementType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MaxSize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>Front <span class="token operator">=</span> Q<span class="token operator">-></span>Rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>MaxSize <span class="token operator">=</span> MaxSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> Q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">IsFull</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>Rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Q<span class="token operator">-></span>MaxSize <span class="token operator">==</span> Q<span class="token operator">-></span>Front<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">,</span> ElementType X<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsFull</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        Q<span class="token operator">-></span>Rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>Rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Q<span class="token operator">-></span>MaxSize<span class="token punctuation">;</span>        Q<span class="token operator">-></span>Data<span class="token punctuation">[</span>Q<span class="token operator">-></span>Rear<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>Front <span class="token operator">==</span> Q<span class="token operator">-></span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>ElementType <span class="token function">DeleteQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        Q<span class="token operator">-></span>Front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>Front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Q<span class="token operator">-></span>MaxSize<span class="token punctuation">;</span>        <span class="token keyword">return</span> Q<span class="token operator">-></span>Data<span class="token punctuation">[</span>Q<span class="token operator">-></span>Front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Tree <span class="token function">BuildTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> check<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cl<span class="token punctuation">,</span> cr<span class="token punctuation">,</span> row<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> check<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c %c%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">=</span> cl <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                check<span class="token punctuation">[</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Left <span class="token operator">=</span> Null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cr <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Right <span class="token operator">=</span> cr <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                check<span class="token punctuation">[</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Right <span class="token operator">=</span> Null<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>        <span class="token keyword">return</span> Null<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">LevelOrderPrintLeaves</span><span class="token punctuation">(</span>BinTree BT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Queue Q<span class="token punctuation">;</span>    BinTree T<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>BT <span class="token operator">-</span> T1 <span class="token operator">==</span> Null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">/* 若是空树则直接返回 */</span>    Q <span class="token operator">=</span> <span class="token function">CreateQueue</span><span class="token punctuation">(</span>MaxTree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*创建并初始化队列Q*/</span>    <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> BT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        T <span class="token operator">=</span> <span class="token function">DeleteQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Left <span class="token operator">==</span> Null <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>Right <span class="token operator">==</span> Null<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> T <span class="token operator">-</span> T1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*访问取出队列的结点，若是叶子则输出*/</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> T <span class="token operator">-</span> T1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Left <span class="token operator">!=</span> Null<span class="token punctuation">)</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T1 <span class="token operator">+</span> T<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>Right <span class="token operator">!=</span> Null<span class="token punctuation">)</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T1 <span class="token operator">+</span> T<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Tree T<span class="token punctuation">;</span>    T <span class="token operator">=</span> <span class="token function">BuildTree</span><span class="token punctuation">(</span>T1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LevelOrderPrintLeaves</span><span class="token punctuation">(</span>T1 <span class="token operator">+</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample 编号乱序，有单边左孩子，中间层少先输出</td><td>答案正确</td><td>13</td><td>4 ms</td><td>188 KB</td></tr><tr><td>1</td><td>最大N，有单边右孩子，多层</td><td>答案正确</td><td>5</td><td>4 ms</td><td>196 KB</td></tr><tr><td>2</td><td>最小N</td><td>答案正确</td><td>1</td><td>4 ms</td><td>192 KB</td></tr><tr><td>3</td><td>每层都有输出，有双孩子</td><td>答案正确</td><td>5</td><td>4 ms</td><td>192 KB</td></tr><tr><td>4</td><td>单边树，只有1个输出</td><td>答案正确</td><td>1</td><td>3 ms</td><td>192 KB</td></tr></tbody></table><h3 id="3-Tree-Traversals-Again"><a href="#3-Tree-Traversals-Again" class="headerlink" title="3.Tree Traversals Again"></a><a href="https://pintia.cn/problem-sets/16/problems/667">3.Tree Traversals Again</a></h3><p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.</p><p><img src="https://images.ptausercontent.com/30" alt="图1"></p><h4 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to <em>N</em>). Then 2<em>N</em> lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p><h4 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p><h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">6Push 1Push 2Push 3PopPopPush 4PopPopPush 5Push 6PopPop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">3 4 2 6 5 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>事实上， Push的顺序为先序遍历，Pop的顺序给出中序遍历，要我们求后续遍历。利用前述分解的思路递归求解即可。</p><h4 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">30</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> pre<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> post<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> preL<span class="token punctuation">,</span> <span class="token keyword">int</span> inL<span class="token punctuation">,</span> <span class="token keyword">int</span> postL<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        post<span class="token punctuation">[</span>postL<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>preL<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> root <span class="token operator">=</span> pre<span class="token punctuation">[</span>preL<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>    post<span class="token punctuation">[</span>postL <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>inL <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> root<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> L <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> R <span class="token operator">=</span> n <span class="token operator">-</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span>preL <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inL<span class="token punctuation">,</span> postL<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span>preL <span class="token operator">+</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inL <span class="token operator">+</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> postL <span class="token operator">+</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'u'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pre<span class="token punctuation">[</span>cnt1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>cnt1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            in<span class="token punctuation">[</span>cnt2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> post<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample 有单边有双边结点</td><td>答案正确</td><td>12</td><td>3 ms</td><td>328 KB</td></tr><tr><td>1</td><td>单边喇叭张开形</td><td>答案正确</td><td>4</td><td>3 ms</td><td>328 KB</td></tr><tr><td>2</td><td>交错</td><td>答案正确</td><td>4</td><td>3 ms</td><td>200 KB</td></tr><tr><td>3</td><td>N=1</td><td>答案正确</td><td>1</td><td>4 ms</td><td>192 KB</td></tr><tr><td>4</td><td>N=30，复杂组合</td><td>答案正确</td><td>4</td><td>3 ms</td><td>324 KB</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构week2</title>
      <link href="2021/072949644.html"/>
      <url>2021/072949644.html</url>
      
        <content type="html"><![CDATA[<h1 id="Week2线性结构"><a href="#Week2线性结构" class="headerlink" title="Week2线性结构"></a>Week2线性结构</h1><h2 id="2-1-线性表及其实现"><a href="#2-1-线性表及其实现" class="headerlink" title="2.1 线性表及其实现"></a>2.1 线性表及其实现</h2><h3 id="多项式的表示"><a href="#多项式的表示" class="headerlink" title="多项式的表示"></a>多项式的表示</h3><p>例 一元多项式及其运算</p><p>一元多项式 ：$f(x)=a_0+a_1x+\cdots+a_{n-1}x^{n-1}+a_nx^n$​</p><p>主要运算： 多项式相加、相减、相乘等</p><p>分析 如何表示多项式？多项式的关键数据：多项式系数n和各项系数$a_i$及指数i</p><h4 id="方法1：顺序存储结构直接表示"><a href="#方法1：顺序存储结构直接表示" class="headerlink" title="方法1：顺序存储结构直接表示"></a>方法1：顺序存储结构直接表示</h4><p>数组各分量对应多项式各项 ：$a[i]:$项$x^i$的系数$a_i$</p><p>两个多项式相加： 两个数组对应分量相加  </p><p>问题：如何表示多项式 $x+3x^{2000}?$​  （用数组空间浪费）</p><h4 id="方法2：顺序存储结构表示非零项"><a href="#方法2：顺序存储结构表示非零项" class="headerlink" title="方法2：顺序存储结构表示非零项"></a>方法2：顺序存储结构表示非零项</h4><p>每个非零项$a_ix^i$涉及两个信息：系数$a_i$和指数$i$</p><p>可以将一个多项式看成是一个$(a_i,i)$二元组的集合</p><p>用结构数组表示： 数组分量是由系数$a_i$、指数$i$组成的结构，对应一个非零项  </p><p><strong>按指数大小有序存储！</strong></p><p>相加过程：从头开始，比较两个多项式当前对应项的指数  </p><p>$P1: (9,12), (15,8), (3,2)$</p><p>$P2: (26,19), (-4,8), (-13,6), (82,0)$</p><p>$P3: (26,19) (9,12) (11,8) (-13,6) (3,2) (82,0)  $</p><p>$P3(x) = 26x^{19} + 9x^{12} +11x^8 - 13x^6 + 3x^2 + 82$</p><h4 id="方法3：链表结构存储非零项"><a href="#方法3：链表结构存储非零项" class="headerlink" title="方法3：链表结构存储非零项"></a>方法3：链表结构存储非零项</h4><p>链表中每个结点存储多项式中的一个非零项，包括系数和指数两个数据域以及一个指针域  </p><table><thead><tr><th>coef</th><th>expon</th><th>link</th></tr></thead></table><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PolyNode</span> <span class="token operator">*</span>Polynomial<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> coef<span class="token punctuation">;</span><span class="token keyword">int</span> expon<span class="token punctuation">;</span>Polynomial link<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么是线性表"><a href="#什么是线性表" class="headerlink" title="什么是线性表"></a>什么是线性表</h3><p>多项式表示问题的启示：</p><ol><li>同一个问题可以有不同的表示（存储）方法</li><li>有一类共性问题：有序线性序列的组织和管理 </li></ol><p>” 线性表（Linear List）”：由同类型数据元素构成有序序列的线性结构</p><ul><li>表中元素个数称为线性表的长度</li><li>线性表没有元素时，称为空表</li><li>表起始位置称表头，表结束位置称表尾  </li></ul><h3 id="线性表的抽象数据类型描述"><a href="#线性表的抽象数据类型描述" class="headerlink" title="线性表的抽象数据类型描述"></a>线性表的抽象数据类型描述</h3><p>类型名称： 线性表$(List)$</p><p>数据对象集： 线性表是 $n (≥0)$个元素构成的有序序列$( a_1, a_2, \cdots,a_n )$</p><p>操作集： 线性表$L \in List$，整数$i$表示位置，元素$X \in ElementType$，</p><p>线性表基本操作主要有：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">MakeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//初始化一个空线性表L；</span>ElementType <span class="token function">FindKth</span><span class="token punctuation">(</span><span class="token keyword">int</span> K<span class="token punctuation">,</span> List L<span class="token punctuation">)</span><span class="token comment">//根据位序K，返回相应元素 ；</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> List L<span class="token punctuation">)</span><span class="token comment">//在线性表L中查找X的第一次出现位置；</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> List L<span class="token punctuation">)</span><span class="token comment">//在位序i前插入一个新元素X；</span><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> List L<span class="token punctuation">)</span><span class="token comment">//删除指定位序i的元素；</span><span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token comment">//返回线性表L的长度n。    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线性表的顺序存储实现"><a href="#线性表的顺序存储实现" class="headerlink" title="线性表的顺序存储实现"></a>线性表的顺序存储实现</h3><p>利用数组的<strong>连续存储空间顺序存放</strong>线性表的各元素  </p><table><thead><tr><th>下标$i$</th><th>0</th><th>1</th><th>$\cdots$</th><th>$i-1$</th><th>$i$</th><th>$\cdots$</th><th>$n-1$</th><th>$\cdots$</th><th>$MAXSIZE-1$</th></tr></thead><tbody><tr><td>Data</td><td>$a_1$</td><td>$a_2$​</td><td>$\cdots$</td><td>$a_i$​</td><td>$a_{i+1}$​</td><td>$\cdots$</td><td>$a_n(Last)$​</td><td>$\cdots$</td><td>-</td></tr></tbody></table><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token operator">*</span> List<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span> L<span class="token punctuation">;</span>List PtrL<span class="token punctuation">;</span><span class="token comment">//访问下标为 i 的元素： L.Data[i] 或 PtrL->Data[i]</span><span class="token comment">//线性表的长度： L.Last+1 或 PtrL->Last+1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主要操作的实现"><a href="#主要操作的实现" class="headerlink" title="主要操作的实现"></a>主要操作的实现</h4><h5 id="1-初始化（建立空的顺序表）"><a href="#1-初始化（建立空的顺序表）" class="headerlink" title="1.初始化（建立空的顺序表）"></a>1.初始化（建立空的顺序表）</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">MakeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>List PtrL<span class="token punctuation">;</span>PtrL <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PtrL<span class="token operator">-></span>Last <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> PtrL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> PtrL<span class="token operator">-></span>Last <span class="token operator">&amp;&amp;</span> PtrL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> X<span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> PtrL<span class="token operator">-></span>Last<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* 如果没找到， 返回-1 */</span><span class="token keyword">else</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">/* 找到后返回的是存储位置 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找成功的平均比较次数为$(n +1)/2$，平均时间性能为$O(n)$。  </p><h5 id="3-插入（第-i-1≤i≤n-1-个位置上插入一个值为-X-的新元素"><a href="#3-插入（第-i-1≤i≤n-1-个位置上插入一个值为-X-的新元素" class="headerlink" title="3.插入（第 $i (1≤i≤n+1)$个位置上插入一个值为$X$的新元素)"></a>3.插入（第 $i (1≤i≤n+1)$个位置上插入一个值为$X$的新元素)</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrL<span class="token operator">-></span>Last <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 表空间已满，不能插入*/</span><span class="token function">printf</span><span class="token punctuation">(</span>＂表满＂<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> PtrL<span class="token operator">-></span>Last <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*检查插入位置的合法性*/</span><span class="token function">printf</span><span class="token punctuation">(</span>＂位置不合法＂<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> PtrL<span class="token operator">-></span>Last<span class="token punctuation">;</span> j <span class="token operator">>=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>PtrL<span class="token operator">-></span>Data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PtrL<span class="token operator">-></span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*将 ai～ an倒序向后移动*/</span>PtrL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">;</span> <span class="token comment">/*新元素插入*/</span>PtrL<span class="token operator">-></span>Last<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">/*Last仍指向最后元素*/</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平均移动次数为$ n /2$， 平均时间性能为 $O(n)$</p><h5 id="4-删除（删除表的第-i-1≤i≤n-个位置上的元素"><a href="#4-删除（删除表的第-i-1≤i≤n-个位置上的元素" class="headerlink" title="4.删除（删除表的第$ i (1≤i≤n)$个位置上的元素)"></a>4.删除（删除表的第$ i (1≤i≤n)$个位置上的元素)</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> PtrL<span class="token operator">-></span>Last <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*检查空表及删除位置的合法性*/</span><span class="token function">printf</span><span class="token punctuation">(</span>“不存在第 <span class="token operator">%</span> d个元素”<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> PtrL<span class="token operator">-></span>Last<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>PtrL<span class="token operator">-></span>Data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> PtrL<span class="token operator">-></span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*将 ai+1～ an顺序向前移动*/</span>PtrL<span class="token operator">-></span>Last<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">/*Last仍指向最后元素*/</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平均移动次数为$ (n-1) /2$​， 平均时间性能为 $O(n)$​</p><h3 id="线性表的链式存储实现"><a href="#线性表的链式存储实现" class="headerlink" title="线性表的链式存储实现"></a>线性表的链式存储实现</h3><p>不要求逻辑上相邻的两个元素物理上也相邻；通过“链”建立起数据元素之间的逻辑关系。</p><p>• 插入、删除不需要移动数据元素，只需要修改“链” 。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token operator">*</span> List<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">;</span>List Next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span> L<span class="token punctuation">;</span>List PtrL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主要操作的实现-1"><a href="#主要操作的实现-1" class="headerlink" title="主要操作的实现"></a>主要操作的实现</h4><h5 id="1-求表长"><a href="#1-求表长" class="headerlink" title="1.求表长"></a>1.求表长</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span>List PtrL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>List p <span class="token operator">=</span> PtrL<span class="token punctuation">;</span> <span class="token comment">/* p指向表的第一个结点*/</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>Next<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">/* 当前p指向的是第 j 个结点*/</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间性能为 $O(n)$。</p><h5 id="2-查找-1"><a href="#2-查找-1" class="headerlink" title="2.查找"></a>2.查找</h5><h6 id="（1）按序号查找-FindKth"><a href="#（1）按序号查找-FindKth" class="headerlink" title="（1）按序号查找: FindKth;"></a>（1）按序号查找: FindKth;</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">FindKth</span><span class="token punctuation">(</span><span class="token keyword">int</span> K<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>List p <span class="token operator">=</span> PtrL<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>Next<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> K<span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token comment">/* 找到第K个，返回指针 */</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">/* 否则返回空 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="（2）按值查找-Find"><a href="#（2）按值查找-Find" class="headerlink" title="（2）按值查找: Find"></a>（2）按值查找: Find</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">Find</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>List p <span class="token operator">=</span> PtrL<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>Data <span class="token operator">!=</span> X<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token operator">-></span>Next<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-插入（在第-i-1-1≤i≤n-1-个结点后插入一个值为-X-的新结点"><a href="#3-插入（在第-i-1-1≤i≤n-1-个结点后插入一个值为-X-的新结点" class="headerlink" title="3.插入（在第 $i-1(1≤i≤n+1)$个结点后插入一个值为$X$的新结点)"></a>3.插入（在第 $i-1(1≤i≤n+1)$个结点后插入一个值为$X$的新结点)</h5><p>（1）先构造一个新结点，用s指向；</p><p>（2）再找到链表的第 i-1个结点，用p指向；</p><p>（3）然后修改指针，插入结点 （ p之后插入新结点是 s）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">Insert</span><span class="token punctuation">(</span>ElementType X<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>List p<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 新结点插入在表头 */</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*申请、填装结点*/</span>s<span class="token operator">-></span>Data <span class="token operator">=</span> X<span class="token punctuation">;</span>s<span class="token operator">-></span>Next <span class="token operator">=</span> PtrL<span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span> <span class="token comment">/*返回新表头指针*/</span><span class="token punctuation">&#125;</span>p <span class="token operator">=</span> <span class="token function">FindKth</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> PtrL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 查找第i-1个结点 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 第i-1个不存在，不能插入 */</span><span class="token function">printf</span><span class="token punctuation">(</span>＂参数i错＂<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*申请、填装结点*/</span>s<span class="token operator">-></span>Data <span class="token operator">=</span> X<span class="token punctuation">;</span>s<span class="token operator">-></span>Next <span class="token operator">=</span> p<span class="token operator">-></span>Next<span class="token punctuation">;</span> <span class="token comment">/*新结点插入在第i-1个结点的后面*/</span>p<span class="token operator">-></span>Next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token keyword">return</span> PtrL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-删除（删除链表的第-i-1≤i≤n-个位置上的结点"><a href="#4-删除（删除链表的第-i-1≤i≤n-个位置上的结点" class="headerlink" title="4.删除（删除链表的第 $i (1≤i≤n)$个位置上的结点)"></a>4.删除（删除链表的第 $i (1≤i≤n)$个位置上的结点)</h5><p>（1）先找到链表的第 i-1个结点，用p指向；</p><p>（2）再用指针s指向要被删除的结点（ p的下一个结点）；</p><p>（3）然后修改指针，删除s所指结点;</p><p>（4）最后释放s所指结点的空间。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> List PtrL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>List p<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 若要删除的是表的第一个结点 */</span>s <span class="token operator">=</span> PtrL<span class="token punctuation">;</span> <span class="token comment">/*s指向第1个结点*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrL <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> PtrL <span class="token operator">=</span> PtrL<span class="token operator">-></span>Next<span class="token punctuation">;</span> <span class="token comment">/*从链表中删除*/</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*释放被删除结点 */</span><span class="token keyword">return</span> PtrL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p <span class="token operator">=</span> <span class="token function">FindKth</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> PtrL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*查找第i-1个结点*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“第 <span class="token operator">%</span> d个结点不存在”<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>Next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“第 <span class="token operator">%</span> d个结点不存在”<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>s <span class="token operator">=</span> p<span class="token operator">-></span>Next<span class="token punctuation">;</span> <span class="token comment">/*s指向第i个结点*/</span>p<span class="token operator">-></span>Next <span class="token operator">=</span> s<span class="token operator">-></span>Next<span class="token punctuation">;</span> <span class="token comment">/*从链表中删除*/</span><span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*释放被删除结点 */</span><span class="token keyword">return</span> PtrL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广义表（Generalized-List）"><a href="#广义表（Generalized-List）" class="headerlink" title="广义表（Generalized List）"></a>广义表（Generalized List）</h3><ul><li>广义表是线性表的推广</li><li>对于线性表而言， n个元素都是基本的单元素；</li><li>广义表中，这些元素不仅可以是单元素也可以是另一个广义表。  </li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">GNode</span><span class="token operator">*</span> GList<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">GNode</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> Tag<span class="token punctuation">;</span> <span class="token comment">/*标志域： 0表示结点是单元素， 1表示结点是广义表 */</span><span class="token keyword">union</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*子表指针域Sublist与单元素数据域Data复用，即共用存储空间*/</span>ElementType Data<span class="token punctuation">;</span>GList SubList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> URegion<span class="token punctuation">;</span>GList Next<span class="token punctuation">;</span> <span class="token comment">/* 指向后继结点 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h3><p>多重链表： 链表中的节点可能同时隶属于多个链</p><ul><li>多重链表中结点的指针域会有多个，如前面例子包含了Next和SubList两个指针域；</li><li> 但包含两个指针域的链表并不一定是多重链表，比如在双向链表不是多重链表。</li></ul><p>多重链表有广泛的用途：基本上如树、图这样相对复杂的数据结构都可以采用多重链表方式实现存储。  </p><p>例 矩阵可以用二维数组表示，但二维数组表示有两个缺陷：  </p><ul><li>一是数组的大小需要事先确定，</li><li>对于“稀疏矩阵 ”，将造成大量的存储空间浪费。  </li></ul><p>分析  采用一种典型的多重链表——十字链表来存储稀疏矩阵</p><p>1.只存储矩阵非0元素项结点的数据域： 行坐标Row、列坐标Col、数值Value</p><p>2.每个结点通过两个指针域， 把同行、同列串起来;</p><ul><li>行指针（或称为向右指针）Right</li><li>列指针（或称为向下指针）Down  </li></ul><p>用一个标识域Tag来区分头结点和非0元素结点：</p><p>头节点的标识值为“Head”，矩阵非0元素结点的标识值为“Term”。  </p><h2 id="2-2-堆栈"><a href="#2-2-堆栈" class="headerlink" title="2.2 堆栈"></a>2.2 堆栈</h2><h3 id="什么是堆栈"><a href="#什么是堆栈" class="headerlink" title="什么是堆栈"></a>什么是堆栈</h3><p>计算机如何进行表达式求值？  </p><p>例 算术表达式$5+6/2-3*4$。</p><p>正确理解$5+6/2-3*4=5+3-3$​​ $ *\ 4=8-3$​​ $*\ 4=-4$​​​​​</p><p>由两类对象构成的：</p><ul><li>运算数，如2、 3、 4</li><li>运算符号，如$+、 -、 *、 /$</li></ul><p>不同运算符号优先级不一样  </p><h3 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h3><ul><li>中缀表达式： 运算符号位于两个运算数之间。 如 ，$ a + b * c - d / e$</li><li>后缀表达式： 运算符号位于两个运算数之后。如，$ a\ b\ c *\ +\ d\ e\ /\ -  $</li></ul><p>后缀表达式求值策略：从左向右“扫描”，逐个处理运算数和运算符号</p><ol><li>遇到运算数怎么办？如何“记住”目前还不未参与运算的数？</li><li>遇到运算符号怎么办？对应的运算数是什么？  </li></ol><p>启示： 需要有种存储方法，能顺序存储运算数，并在需要时“倒序”输出！  </p><h3 id="堆栈的抽象数据类型描述"><a href="#堆栈的抽象数据类型描述" class="headerlink" title="堆栈的抽象数据类型描述"></a>堆栈的抽象数据类型描述</h3><p>堆栈（Stack） ： 具有一定操作约束的线性表</p><ul><li><p>只在一端（栈顶， Top）做 插入、删除  </p></li><li><p>插入数据： 入栈（Push）</p></li><li><p>删除数据： 出栈（Pop）</p></li><li><p>后入先出： Last In First Out（LIFO）  </p></li></ul><p>类型名称: 堆栈（Stack）</p><p>数据对象集： 一个有0个或多个元素的有穷线性表。</p><p>操作集： 长度为$MaxSize$的堆栈$S \in Stack$，堆栈元素$item \in ElementType$</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Stack <span class="token function">CreateStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> MaxSize<span class="token punctuation">)</span><span class="token comment">//生成空堆栈，其最大长度为MaxSize；</span><span class="token keyword">int</span> <span class="token function">IsFull</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">,</span> <span class="token keyword">int</span> MaxSize<span class="token punctuation">)</span><span class="token comment">//判断堆栈S是否已满；</span><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">,</span> ElementType item<span class="token punctuation">)</span><span class="token comment">//将元素item压入堆栈；</span><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token comment">//判断堆栈S是否为空；</span>ElementType <span class="token function">Pop</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token comment">//删除并返回栈顶元素；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Push 和 Pop 可以穿插交替进行；</p><p>按照操作系列</p><p>$(1)Push(S,A), Push(S,B),Push((S,C),Pop(S),Pop(S),Pop(S) $​ 堆栈输出是$CBA$</p><p>$(2)Push(S,A), Pop(S),Push(S,B),Push((S,C),Pop(S),Pop(S)$​ 堆栈输出是$ACB$​ </p><h3 id="栈的顺序存储实现"><a href="#栈的顺序存储实现" class="headerlink" title="栈的顺序存储实现"></a>栈的顺序存储实现</h3><p>栈的顺序存储结构通常由一个一维数组和一个记录栈顶元素位置的变量组成。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token operator">&lt;</span>储存数据元素的最大个数<span class="token operator">></span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span> Stack<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（1）入-栈"><a href="#（1）入-栈" class="headerlink" title="（1）入 栈"></a>（1）入 栈</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>Stack PtrS<span class="token punctuation">,</span> ElementType item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top <span class="token operator">==</span> MaxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“堆栈满”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>PtrS<span class="token operator">-></span>Data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）出栈"><a href="#（2）出栈" class="headerlink" title="（2）出栈"></a>（2）出栈</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElementType <span class="token function">Pop</span><span class="token punctuation">(</span>Stack PtrS<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“堆栈空”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ERROR<span class="token punctuation">;</span> <span class="token comment">/* ERROR是ElementType的特殊值，标志错误*/</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Data<span class="token punctuation">[</span><span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例 请用一个数组实现两个堆栈，要求最大地利用数组空间，使数组只要有空间入栈操作就可以成功。  </p><p>分析 一种比较聪明的方法是使这两个栈分别从数组的两头开始向中间生长；当两个栈的栈顶指针相遇时，表示两个栈都满了。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token operator">&lt;</span>存储数据元素的最大个数<span class="token operator">></span></span></span><span class="token keyword">struct</span> <span class="token class-name">DStack</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Top1<span class="token punctuation">;</span> <span class="token comment">/* 堆栈１的栈顶指针 */</span><span class="token keyword">int</span> Top2<span class="token punctuation">;</span> <span class="token comment">/* 堆栈２的栈顶指针 */</span><span class="token punctuation">&#125;</span> S<span class="token punctuation">;</span>S<span class="token punctuation">.</span>Top1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>S<span class="token punctuation">.</span>Top2 <span class="token operator">=</span> MaxSize<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DStack</span><span class="token operator">*</span> PtrS<span class="token punctuation">,</span> ElementType item<span class="token punctuation">,</span> <span class="token keyword">int</span> Tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* Tag作为区分两个堆栈的标志，取值为1和2 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top2 – PtrS<span class="token operator">-></span>Top1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*堆栈满*/</span><span class="token function">printf</span><span class="token punctuation">(</span>“堆栈满”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">/* 对第一个堆栈操作 */</span>PtrS<span class="token operator">-></span>Data<span class="token punctuation">[</span><span class="token operator">++</span><span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top1<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token comment">/* 对第二个堆栈操作 */</span>PtrS<span class="token operator">-></span>Data<span class="token punctuation">[</span><span class="token operator">--</span><span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top2<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ElementType <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DStack</span><span class="token operator">*</span> PtrS<span class="token punctuation">,</span> <span class="token keyword">int</span> Tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* Tag作为区分两个堆栈的标志，取值为1和2 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 对第一个堆栈操作 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*堆栈1空 */</span><span class="token function">printf</span><span class="token punctuation">(</span>“堆栈<span class="token number">1</span>空”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> PtrS<span class="token operator">-></span>Data<span class="token punctuation">[</span><span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top1<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 对第二个堆栈操作 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top2 <span class="token operator">==</span> MaxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*堆栈2空 */</span><span class="token function">printf</span><span class="token punctuation">(</span>“堆栈<span class="token number">2</span>空”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> PtrS<span class="token operator">-></span>Data<span class="token punctuation">[</span><span class="token punctuation">(</span>PtrS<span class="token operator">-></span>Top2<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆栈的链式存储实现"><a href="#堆栈的链式存储实现" class="headerlink" title="堆栈的链式存储实现"></a>堆栈的链式存储实现</h3><p>栈的链式存储结构实际上就是一个单链表，叫做链栈。插入和删除操作只能在链栈的栈顶进行。 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span> Stack<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span> Next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-堆栈初始化（建立空栈）"><a href="#1-堆栈初始化（建立空栈）" class="headerlink" title="(1) 堆栈初始化（建立空栈）"></a>(1) 堆栈初始化（建立空栈）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">Stack <span class="token function">CreateStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* 构建一个堆栈的头结点，返回指针 */</span>Stack S<span class="token punctuation">;</span>S <span class="token operator">=</span> <span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>S<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> S<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-判断堆栈S是否为空"><a href="#2-判断堆栈S是否为空" class="headerlink" title="(2) 判断堆栈S是否为空"></a>(2) 判断堆栈S是否为空</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/*判断堆栈S是否为空， 若为空函数返回整数1， 否则返回0 */</span><span class="token keyword">return</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>Next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）入-栈"><a href="#（3）入-栈" class="headerlink" title="（3）入 栈"></a>（3）入 栈</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>ElementType item<span class="token punctuation">,</span> Stack S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* 将元素item压入堆栈S */</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span> TmpCell<span class="token punctuation">;</span>TmpCell <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TmpCell<span class="token operator">-></span>Element <span class="token operator">=</span> item<span class="token punctuation">;</span>TmpCell<span class="token operator">-></span>Next <span class="token operator">=</span> S<span class="token operator">-></span>Next<span class="token punctuation">;</span>S<span class="token operator">-></span>Next <span class="token operator">=</span> TmpCell<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）出栈"><a href="#（4）出栈" class="headerlink" title="（4）出栈"></a>（4）出栈</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElementType <span class="token function">Pop</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* 删除并返回堆栈S的栈顶元素 */</span><span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token operator">*</span> FirstCell<span class="token punctuation">;</span>ElementType TopElem<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“堆栈空”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>FirstCell <span class="token operator">=</span> S<span class="token operator">-></span>Next<span class="token punctuation">;</span>S<span class="token operator">-></span>Next <span class="token operator">=</span> FirstCell<span class="token operator">-></span>Next<span class="token punctuation">;</span>TopElem <span class="token operator">=</span> FirstCell<span class="token operator">-></span>Element<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>FirstCell<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> TopElem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆栈应用：表达式求值"><a href="#堆栈应用：表达式求值" class="headerlink" title="堆栈应用：表达式求值"></a>堆栈应用：表达式求值</h3><p>回忆： 应用堆栈实现后缀表达式求值的基本过程：</p><p>从左到右读入后缀表达式的各项（运算符或运算数）；</p><ol><li>运算数： 入栈；</li><li>运算符： 从堆栈中弹出适当数量的运算数，计算并结果入栈；</li><li>最后，堆栈顶上的元素就是表达式的结果值。  </li></ol><h3 id="中缀表达式求值"><a href="#中缀表达式求值" class="headerlink" title="中缀表达式求值"></a>中缀表达式求值</h3><p>基本策略：将中缀表达式转换为后缀表达式，然后求值</p><p>如何将中缀表达式转换为后缀？</p><p>观察一个简单例子： $2+9/3-5 \qquad \rightarrow\qquad  2\ 9\ 3\ /\ +\ -$​​</p><ol><li><p>运算数相对顺序不变</p></li><li><p>运算符号顺序发生改变</p><p>需要存储“等待中”的运算符号</p><p>要将当前运算符号与“等待中”的最后一个运算符号比较</p></li></ol><h3 id="中缀表达式如何转换为后缀表达式"><a href="#中缀表达式如何转换为后缀表达式" class="headerlink" title="中缀表达式如何转换为后缀表达式"></a>中缀表达式如何转换为后缀表达式</h3><p>从头到尾读取中缀表达式的每个对象，对不同对象按不同的情况处理。</p><p>① 运算数： 直接输出；</p><p>② 左括号： 压入堆栈；</p><p>③ 右括号： 将栈顶的运算符弹出并输出， 直到遇到左括号（出栈，不输出）；</p><p>④ 运算符：</p><p>• 若优先级大于栈顶运算符时，则把它压栈；</p><p>• 若优先级小于等于栈顶运算符时，将栈顶运算符弹出并输出；再比较新的栈顶运算符，直到该运算符大于栈顶运算符优先级为止，然后将该运算符压栈；</p><p>⑤ 若各对象处理完毕，则把堆栈中存留的运算符一并输出。  </p><h3 id="堆栈的其他应用"><a href="#堆栈的其他应用" class="headerlink" title="堆栈的其他应用"></a>堆栈的其他应用</h3><ul><li>函数调用及递归实现</li><li>深度优先搜索</li><li>回溯算法</li><li>$\cdots$</li></ul><h2 id="2-3-队列及实现"><a href="#2-3-队列及实现" class="headerlink" title="2.3 队列及实现"></a>2.3 队列及实现</h2><h3 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><p>队列（Queue）： 具有一定操作约束的线性表</p><ul><li>插入和删除操作：只能在一端插入，而在另一端删除。  </li><li>数据插入： 入队列（AddQ）</li><li>数据删除： 出队列（DeleteQ）</li><li>先来先服务</li><li>先进先出： FIFO  </li></ul><h3 id="队列的抽象数据类型描述"><a href="#队列的抽象数据类型描述" class="headerlink" title="队列的抽象数据类型描述"></a>队列的抽象数据类型描述</h3><p>类型名称：队列（Queue）</p><p>数据对象集： 一个有0个或多个元素的有穷线性表。</p><p>操作集：长度为$MaxSize$的队列$Q \in Queue$，队列元素$item \in ElementType$</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Queue <span class="token function">CreatQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> MaxSize<span class="token punctuation">)</span><span class="token comment">//生成长度为MaxSize的空队列；</span><span class="token keyword">int</span> <span class="token function">IsFullQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">,</span> <span class="token keyword">int</span> MaxSize<span class="token punctuation">)</span><span class="token comment">//判断队列Q是否已满；</span><span class="token keyword">void</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">,</span> ElementType item<span class="token punctuation">)</span><span class="token comment">// 将数据元素item插入队列Q中；</span><span class="token keyword">int</span> <span class="token function">IsEmptyQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token comment">//判断队列Q是否为空；</span>ElementType <span class="token function">DeleteQ</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token comment">//将队头数据元素从队列中删除并返回。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列的顺序存储实现"><a href="#队列的顺序存储实现" class="headerlink" title="队列的顺序存储实现"></a>队列的顺序存储实现</h3><p>队列的顺序存储结构通常由一个一维数组和一个记录队列头元素位置的变量front以及一个记录队列尾元素位置的变量rear组成。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token operator">&lt;</span>储存数据元素的最大个数<span class="token operator">></span></span></span><span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token keyword">int</span> front<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span><span class="token operator">*</span> Queue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（1）入队列"><a href="#（1）入队列" class="headerlink" title="（1）入队列"></a>（1）入队列</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddQ</span><span class="token punctuation">(</span>Queue PtrQ<span class="token punctuation">,</span> ElementType item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PtrQ<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize <span class="token operator">==</span> PtrQ<span class="token operator">-></span>front<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“队列满”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>PtrQ<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>PtrQ<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span>PtrQ<span class="token operator">-></span>Data<span class="token punctuation">[</span>PtrQ<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Front和rear指针的移动采用“加1取余”法，体现了顺序存储的“循环使用”。  </p><h4 id="（2）出队列"><a href="#（2）出队列" class="headerlink" title="（2）出队列"></a>（2）出队列</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElementType <span class="token function">DeleteQ</span><span class="token punctuation">(</span>Queue PtrQ<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrQ<span class="token operator">-></span>front <span class="token operator">==</span> PtrQ<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“队列空”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>PtrQ<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>PtrQ<span class="token operator">-></span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span><span class="token keyword">return</span> PtrQ<span class="token operator">-></span>Data<span class="token punctuation">[</span>PtrQ<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列的链式存储实现"><a href="#队列的链式存储实现" class="headerlink" title="队列的链式存储实现"></a>队列的链式存储实现</h3><p>队列的链式存储结构也可以用一个单链表实现。插入和删除操作分别在链表的两头进行；   </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>ElementType Data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> Next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 链队列结构 */</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> rear<span class="token punctuation">;</span> <span class="token comment">/* 指向队尾结点 */</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> front<span class="token punctuation">;</span> <span class="token comment">/* 指向队头结点 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span><span class="token operator">*</span> Queue<span class="token punctuation">;</span>Queue PtrQ<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不带头结点的链式队列出队操作的一个示例："><a href="#不带头结点的链式队列出队操作的一个示例：" class="headerlink" title="不带头结点的链式队列出队操作的一个示例："></a>不带头结点的链式队列出队操作的一个示例：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">ElementType <span class="token function">DeleteQ</span><span class="token punctuation">(</span>Queue PtrQ<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> FrontCell<span class="token punctuation">;</span>ElementType FrontElem<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrQ<span class="token operator">-></span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“队列空”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>FrontCell <span class="token operator">=</span> PtrQ<span class="token operator">-></span>front<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PtrQ<span class="token operator">-></span>front <span class="token operator">==</span> PtrQ<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token comment">/* 若队列只有一个元素 */</span>PtrQ<span class="token operator">-></span>front <span class="token operator">=</span> PtrQ<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* 删除后队列置为空 */</span><span class="token keyword">else</span>PtrQ<span class="token operator">-></span>front <span class="token operator">=</span> PtrQ<span class="token operator">-></span>front<span class="token operator">-></span>Next<span class="token punctuation">;</span>FrontElem <span class="token operator">=</span> FrontCell<span class="token operator">-></span>Data<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>FrontCell<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 释放被删除结点空间 */</span><span class="token keyword">return</span> FrontElem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-应用-多项式加法运算"><a href="#2-4-应用-多项式加法运算" class="headerlink" title="2.4 应用: 多项式加法运算"></a>2.4 应用: 多项式加法运算</h2><p>主要思路：相同指数的项系数相加，其余部分进行拷贝。  </p><h3 id="多项式加法运算"><a href="#多项式加法运算" class="headerlink" title="多项式加法运算"></a>多项式加法运算</h3><p>采用不带头结点的单向链表， 按照指数递减的顺序排列各项  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> coef<span class="token punctuation">;</span> <span class="token comment">// 系数</span><span class="token keyword">int</span> expon<span class="token punctuation">;</span> <span class="token comment">// 指数</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token operator">*</span> link<span class="token punctuation">;</span> <span class="token comment">// 指向下一个节点的指针</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token operator">*</span> Polynomial<span class="token punctuation">;</span>Polynomial P1<span class="token punctuation">,</span> P2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>算法思路</strong>： 两个指针P1和P2分别指向这两个多项式第一个结点， 不断循环：</p><ul><li>P1-&gt;expon == P2-&gt;expon: 系数相加，若结果不为0，则作为结果多项式对应项的系数。 同时， P1和P2都分别指向下一项；</li><li>P1-&gt;expon &gt; P2-&gt;expon: 将P1的当前项存入结果多项式，并使P1指向下一项；</li><li>P1-&gt;expon &lt; P2-&gt;expon: 将P2的当前项存入结果多项式，并使P2指向下一项；</li></ul><p>当某一多项式处理完时，将另一个多项式的所有结点依次复制到结果多项式中去。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Polynomial <span class="token function">PolyAdd</span><span class="token punctuation">(</span>Polynomial P1<span class="token punctuation">,</span> Polynomial P2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Polynomial front<span class="token punctuation">,</span> rear<span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为方便表头插入，先产生一个临时空结点作为结果多项式链表头</span>front <span class="token operator">=</span> rear<span class="token punctuation">;</span> <span class="token comment">/* 由front 记录结果多项式链表头结点 */</span><span class="token keyword">while</span> <span class="token punctuation">(</span>P1 <span class="token operator">&amp;&amp;</span> P2<span class="token punctuation">)</span> <span class="token comment">/* 当两个多项式都有非零项待处理时 */</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">Compare</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>expon<span class="token punctuation">,</span> P2<span class="token operator">-></span>expon<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">//P1中的数据项指数较大</span><span class="token function">Attach</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>coef<span class="token punctuation">,</span> P1<span class="token operator">-></span>expon<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>P1 <span class="token operator">=</span> P1<span class="token operator">-></span>link<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token comment">//P2中的数据项指数较大</span><span class="token function">Attach</span><span class="token punctuation">(</span>P2<span class="token operator">-></span>coef<span class="token punctuation">,</span> P2<span class="token operator">-></span>expon<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> P2<span class="token operator">-></span>link<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">//两数据项指数相等</span>sum <span class="token operator">=</span> P1<span class="token operator">-></span>coef <span class="token operator">+</span> P2<span class="token operator">-></span>coef<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token function">Attach</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> P1<span class="token operator">-></span>expon<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意判断系数和是否为0</span>P1 <span class="token operator">=</span> P1<span class="token operator">-></span>link<span class="token punctuation">;</span>P2 <span class="token operator">=</span> P2<span class="token operator">-></span>link<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 将未处理完的另一个多项式的所有节点依次复制到结果多项式中去 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> P1<span class="token punctuation">;</span> P1 <span class="token operator">=</span> P1<span class="token operator">-></span>link<span class="token punctuation">)</span> <span class="token function">Attach</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>coef<span class="token punctuation">,</span> P1<span class="token operator">-></span>expon<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> P2<span class="token punctuation">;</span> P2 <span class="token operator">=</span> P2<span class="token operator">-></span>link<span class="token punctuation">)</span> <span class="token function">Attach</span><span class="token punctuation">(</span>P2<span class="token operator">-></span>coef<span class="token punctuation">,</span> P2<span class="token operator">-></span>expon<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>rear<span class="token operator">-></span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> front<span class="token punctuation">;</span>front <span class="token operator">=</span> front<span class="token operator">-></span>link<span class="token punctuation">;</span> <span class="token comment">/*令front指向结果多项式第一个非零项 */</span><span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 释放临时空表头结点 */</span><span class="token keyword">return</span> front<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Attach</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">,</span> Polynomial<span class="token operator">*</span> pRear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* 由于在本函数中需要改变当前结果表达式尾项指针的值， */</span><span class="token comment">/* 所以函数传递进来的是结点指针的地址， *pRear指向尾项*/</span>Polynomial P<span class="token punctuation">;</span>P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PolyNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 申请新结点 */</span>P<span class="token operator">-></span>coef <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">/* 对新结点赋值 */</span>P<span class="token operator">-></span>expon <span class="token operator">=</span> e<span class="token punctuation">;</span>P<span class="token operator">-></span>link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">/* 将P指向的新结点插入到当前结果表达式尾项的后面 */</span><span class="token punctuation">(</span><span class="token operator">*</span>pRear<span class="token punctuation">)</span><span class="token operator">-></span>link <span class="token operator">=</span> P<span class="token punctuation">;</span><span class="token operator">*</span>pRear <span class="token operator">=</span> P<span class="token punctuation">;</span> <span class="token comment">/* 修改pRear值 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><h3 id="线性表数组实现"><a href="#线性表数组实现" class="headerlink" title="线性表数组实现"></a>线性表数组实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 1000typedef int ElementType;typedef int Position;typedef struct LNode *List;struct LNode &#123;    ElementType Data[MAXSIZE];    Position Last;&#125;;&#x2F;* 初始化 *&#x2F;List MakeEmpty() &#123;    List L;    L &#x3D; (List)malloc(sizeof(struct LNode));    L-&gt;Last &#x3D; -1;    return L;&#125;&#x2F;* 查找 *&#x2F;#define ERROR -1Position Find(List L, ElementType X) &#123;    Position i &#x3D; 0;    while (i &lt;&#x3D; L-&gt;Last &amp;&amp; L-&gt;Data[i] !&#x3D; X) i++;    if (i &gt; L-&gt;Last)        return ERROR; &#x2F;* 如果没找到，返回错误信息 *&#x2F;    else        return i; &#x2F;* 找到后返回的是存储位置 *&#x2F;&#125;&#x2F;* 插入 *&#x2F;&#x2F;*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*&#x2F;bool Insert(List L, ElementType X, Position P) &#123;    &#x2F;* 在L的指定位置P前插入一个新元素X *&#x2F;    Position i;    if (L-&gt;Last &#x3D;&#x3D; MAXSIZE - 1) &#123;        &#x2F;* 表空间已满，不能插入 *&#x2F;        printf(&quot;表满&quot;);        return false;    &#125;    if (P &lt; 0 || P &gt; L-&gt;Last + 1) &#123; &#x2F;* 检查插入位置的合法性 *&#x2F;        printf(&quot;位置不合法&quot;);        return false;    &#125;    for (i &#x3D; L-&gt;Last; i &gt;&#x3D; P; i--)        L-&gt;Data[i + 1] &#x3D; L-&gt;Data[i]; &#x2F;* 将位置P及以后的元素顺序向后移动 *&#x2F;    L-&gt;Data[P] &#x3D; X;                  &#x2F;* 新元素插入 *&#x2F;    L-&gt;Last++;                       &#x2F;* Last仍指向最后元素 *&#x2F;    return true;&#125;&#x2F;* 删除 *&#x2F;&#x2F;*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*&#x2F;bool Delete(List L, Position P) &#123; &#x2F;* 从L中删除指定位置P的元素 *&#x2F;    Position i;    if (P &lt; 0 || P &gt; L-&gt;Last) &#123; &#x2F;* 检查空表及删除位置的合法性 *&#x2F;        printf(&quot;位置%d不存在元素&quot;, P);        return false;    &#125;    for (i &#x3D; P + 1; i &lt;&#x3D; L-&gt;Last; i++)        L-&gt;Data[i - 1] &#x3D; L-&gt;Data[i]; &#x2F;* 将位置P+1及以后的元素顺序向前移动 *&#x2F;    L-&gt;Last--;                       &#x2F;* Last仍指向最后元素 *&#x2F;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表的链式结构实现"><a href="#表的链式结构实现" class="headerlink" title="表的链式结构实现"></a>表的链式结构实现</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef int ElementType;typedef struct LNode *PtrToLNode;struct LNode &#123;    ElementType Data;    PtrToLNode Next;&#125;;typedef PtrToLNode Position;typedef PtrToLNode List;&#x2F;* 查找 *&#x2F;#define ERROR NULLPosition Find(List L, ElementType X) &#123;    Position p &#x3D; L; &#x2F;* p指向L的第1个结点 *&#x2F;    while (p &amp;&amp; p-&gt;Data !&#x3D; X) p &#x3D; p-&gt;Next;    &#x2F;* 下列语句可以用 return p; 替换 *&#x2F;    if (p)        return p;    else        return ERROR;&#125;&#x2F;* 带头结点的插入 *&#x2F;&#x2F;*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是链表结点指针，在P之前插入新结点 *&#x2F;bool Insert(List L, ElementType X, Position P) &#123; &#x2F;* 这里默认L有头结点 *&#x2F;    Position tmp, pre;    &#x2F;* 查找P的前一个结点 *&#x2F;    for (pre &#x3D; L; pre &amp;&amp; pre-&gt;Next !&#x3D; P; pre &#x3D; pre-&gt;Next)        ;    if (pre &#x3D;&#x3D; NULL) &#123; &#x2F;* P所指的结点不在L中 *&#x2F;        printf(&quot;插入位置参数错误\n&quot;);        return false;    &#125; else &#123; &#x2F;* 找到了P的前一个结点pre *&#x2F;        &#x2F;* 在P前插入新结点 *&#x2F;        tmp &#x3D; (Position)malloc(sizeof(struct LNode)); &#x2F;* 申请、填装结点 *&#x2F;        tmp-&gt;Data &#x3D; X;        tmp-&gt;Next &#x3D; P;        pre-&gt;Next &#x3D; tmp;        return true;    &#125;&#125;&#x2F;* 带头结点的删除 *&#x2F;&#x2F;*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是拟删除结点指针 *&#x2F;bool Delete(List L, Position P) &#123; &#x2F;* 这里默认L有头结点 *&#x2F;    Position pre;    &#x2F;* 查找P的前一个结点 *&#x2F;    for (pre &#x3D; L; pre &amp;&amp; pre-&gt;Next !&#x3D; P; pre &#x3D; pre-&gt;Next)        ;    if (pre &#x3D;&#x3D; NULL || P &#x3D;&#x3D; NULL) &#123; &#x2F;* P所指的结点不在L中 *&#x2F;        printf(&quot;删除位置参数错误\n&quot;);        return false;    &#125; else &#123; &#x2F;* 找到了P的前一个结点pre *&#x2F;        &#x2F;* 将P位置的结点删除 *&#x2F;        pre-&gt;Next &#x3D; P-&gt;Next;        free(P);        return true;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆栈数组实现"><a href="#堆栈数组实现" class="headerlink" title="堆栈数组实现"></a>堆栈数组实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 1000#define ERROR -1typedef int ElementType;typedef int Position;struct SNode &#123;    ElementType *Data; &#x2F;* 存储元素的数组 *&#x2F;    Position Top;      &#x2F;* 栈顶指针 *&#x2F;    int MaxSize;       &#x2F;* 堆栈最大容量 *&#x2F;&#125;;typedef struct SNode *Stack;Stack CreateStack(int MaxSize) &#123;    Stack S &#x3D; (Stack)malloc(sizeof(struct SNode));    S-&gt;Data &#x3D; (ElementType *)malloc(MaxSize * sizeof(ElementType));    S-&gt;Top &#x3D; -1;    S-&gt;MaxSize &#x3D; MaxSize;    return S;&#125;bool IsFull(Stack S) &#123;    return (S-&gt;Top &#x3D;&#x3D; S-&gt;MaxSize - 1);&#125;bool Push(Stack S, ElementType X) &#123;    if (IsFull(S)) &#123;        printf(&quot;堆栈满&quot;);        return false;    &#125; else &#123;        S-&gt;Data[++(S-&gt;Top)] &#x3D; X;        return true;    &#125;&#125;bool IsEmpty(Stack S) &#123;    return (S-&gt;Top &#x3D;&#x3D; -1);&#125;ElementType Pop(Stack S) &#123;    if (IsEmpty(S)) &#123;        printf(&quot;堆栈空&quot;);        return ERROR; &#x2F;* ERROR是ElementType的特殊值，标志错误 *&#x2F;    &#125; else        return (S-&gt;Data[(S-&gt;Top)--]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆栈链式实现"><a href="#堆栈链式实现" class="headerlink" title="堆栈链式实现"></a>堆栈链式实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define ERROR NULLtypedef int ElementType;typedef struct SNode *PtrToSNode;struct SNode &#123;    ElementType Data;    PtrToSNode Next;&#125;;typedef PtrToSNode Stack;Stack CreateStack() &#123; &#x2F;* 构建一个堆栈的头结点，返回该结点指针 *&#x2F;    Stack S;    S &#x3D; (Stack)malloc(sizeof(struct SNode));    S-&gt;Next &#x3D; NULL;    return S;&#125;bool IsEmpty(Stack S) &#123; &#x2F;* 判断堆栈S是否为空，若是返回true；否则返回false *&#x2F;    return (S-&gt;Next &#x3D;&#x3D; NULL);&#125;bool Push(Stack S, ElementType X) &#123; &#x2F;* 将元素X压入堆栈S *&#x2F;    PtrToSNode TmpCell;    TmpCell &#x3D; (PtrToSNode)malloc(sizeof(struct SNode));    TmpCell-&gt;Data &#x3D; X;    TmpCell-&gt;Next &#x3D; S-&gt;Next;    S-&gt;Next &#x3D; TmpCell;    return true;&#125;ElementType Pop(Stack S) &#123; &#x2F;* 删除并返回堆栈S的栈顶元素 *&#x2F;    PtrToSNode FirstCell;    ElementType TopElem;    if (IsEmpty(S)) &#123;        printf(&quot;堆栈空&quot;);        return ERROR;    &#125; else &#123;        FirstCell &#x3D; S-&gt;Next;        TopElem &#x3D; FirstCell-&gt;Data;        S-&gt;Next &#x3D; FirstCell-&gt;Next;        free(FirstCell);        return TopElem;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列数组实现"><a href="#队列数组实现" class="headerlink" title="队列数组实现"></a>队列数组实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 1000#define ERROR -1typedef int ElementType;typedef int Position;struct QNode &#123;    ElementType *Data;    &#x2F;* 存储元素的数组 *&#x2F;    Position Front, Rear; &#x2F;* 队列的头、尾指针 *&#x2F;    int MaxSize;          &#x2F;* 队列最大容量 *&#x2F;&#125;;typedef struct QNode *Queue;Queue CreateQueue(int MaxSize) &#123;    Queue Q &#x3D; (Queue)malloc(sizeof(struct QNode));    Q-&gt;Data &#x3D; (ElementType *)malloc(MaxSize * sizeof(ElementType));    Q-&gt;Front &#x3D; Q-&gt;Rear &#x3D; 0;    Q-&gt;MaxSize &#x3D; MaxSize;    return Q;&#125;bool IsFull(Queue Q) &#123;    return ((Q-&gt;Rear + 1) % Q-&gt;MaxSize &#x3D;&#x3D; Q-&gt;Front);&#125;bool AddQ(Queue Q, ElementType X) &#123;    if (IsFull(Q)) &#123;        printf(&quot;队列满&quot;);        return false;    &#125; else &#123;        Q-&gt;Rear &#x3D; (Q-&gt;Rear + 1) % Q-&gt;MaxSize;        Q-&gt;Data[Q-&gt;Rear] &#x3D; X;        return true;    &#125;&#125;bool IsEmpty(Queue Q) &#123;    return (Q-&gt;Front &#x3D;&#x3D; Q-&gt;Rear);&#125;ElementType DeleteQ(Queue Q) &#123;    if (IsEmpty(Q)) &#123;        printf(&quot;队列空&quot;);        return ERROR;    &#125; else &#123;        Q-&gt;Front &#x3D; (Q-&gt;Front + 1) % Q-&gt;MaxSize;        return Q-&gt;Data[Q-&gt;Front];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列链式实现"><a href="#队列链式实现" class="headerlink" title="队列链式实现"></a>队列链式实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define ERROR NULLtypedef int ElementType;typedef struct Node *PtrToNode;struct Node &#123; &#x2F;* 队列中的结点 *&#x2F;    ElementType Data;    PtrToNode Next;&#125;;typedef PtrToNode Position;struct QNode &#123;    Position Front, Rear; &#x2F;* 队列的头、尾指针 *&#x2F;    int MaxSize;          &#x2F;* 队列最大容量 *&#x2F;&#125;;typedef struct QNode *Queue;bool IsEmpty(Queue Q) &#123;    return (Q-&gt;Front &#x3D;&#x3D; NULL);&#125;ElementType DeleteQ(Queue Q) &#123;    Position FrontCell;    ElementType FrontElem;    if (IsEmpty(Q)) &#123;        printf(&quot;队列空&quot;);        return ERROR;    &#125; else &#123;        FrontCell &#x3D; Q-&gt;Front;        if (Q-&gt;Front &#x3D;&#x3D; Q-&gt;Rear)       &#x2F;* 若队列只有一个元素 *&#x2F;            Q-&gt;Front &#x3D; Q-&gt;Rear &#x3D; NULL; &#x2F;* 删除后队列置为空 *&#x2F;        else            Q-&gt;Front &#x3D; Q-&gt;Front-&gt;Next;        FrontElem &#x3D; FrontCell-&gt;Data;        free(FrontCell); &#x2F;* 释放被删除结点空间  *&#x2F;        return FrontElem;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编程习题"><a href="#编程习题" class="headerlink" title="编程习题"></a>编程习题</h2><h3 id="1-两个有序链表序列的合并"><a href="#1-两个有序链表序列的合并" class="headerlink" title="1.两个有序链表序列的合并"></a><a href="https://pintia.cn/problem-sets/434/problems/5803">1.两个有序链表序列的合并</a></h3><p>本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。</p><h4 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">List Merge( List L1, List L2 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>List</code>结构定义如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct Node *PtrToNode;struct Node &#123;    ElementType Data; &#x2F;* 存储结点数据 *&#x2F;    PtrToNode   Next; &#x2F;* 指向下一个结点的指针 *&#x2F;&#125;;typedef PtrToNode List; &#x2F;* 定义单链表类型 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>L1</code>和<code>L2</code>是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数<code>Merge</code>要将<code>L1</code>和<code>L2</code>合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。</p><h4 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef int ElementType;typedef struct Node *PtrToNode;struct Node &#123;    ElementType Data;    PtrToNode   Next;&#125;;typedef PtrToNode List;List Read(); &#x2F;* 细节在此不表 *&#x2F;void Print( List L ); &#x2F;* 细节在此不表；空链表将输出NULL *&#x2F;List Merge( List L1, List L2 );int main()&#123;    List L1, L2, L;    L1 &#x3D; Read();    L2 &#x3D; Read();    L &#x3D; Merge(L1, L2);    Print(L);    Print(L1);    Print(L2);    return 0;&#125;&#x2F;* 你的代码将被嵌在这里 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">31 3 552 4 6 8 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">1 2 3 4 5 6 8 10 NULLNULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>类似多项式加法，注意直接用原来L1和L2中节点，同时此题链表是带头结点的，小心空链表情形。</p><h4 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">Merge</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List L2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    List head <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List old <span class="token operator">=</span> head<span class="token punctuation">,</span> Ptr1 <span class="token operator">=</span> L1<span class="token operator">-></span>Next<span class="token punctuation">,</span> Ptr2 <span class="token operator">=</span> L2<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>Ptr1 <span class="token operator">&amp;&amp;</span> Ptr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Ptr1<span class="token operator">-></span>Data <span class="token operator">&lt;</span> Ptr2<span class="token operator">-></span>Data<span class="token punctuation">)</span>            old<span class="token operator">-></span>Next <span class="token operator">=</span> Ptr1<span class="token punctuation">,</span> Ptr1 <span class="token operator">=</span> Ptr1<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token keyword">else</span>            old<span class="token operator">-></span>Next <span class="token operator">=</span> Ptr2<span class="token punctuation">,</span> Ptr2 <span class="token operator">=</span> Ptr2<span class="token operator">-></span>Next<span class="token punctuation">;</span>        old <span class="token operator">=</span> old<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>Ptr1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        old<span class="token operator">-></span>Next <span class="token operator">=</span> Ptr1<span class="token punctuation">;</span>        Ptr1 <span class="token operator">=</span> Ptr1<span class="token operator">-></span>Next<span class="token punctuation">;</span>        old <span class="token operator">=</span> old<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>Ptr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        old<span class="token operator">-></span>Next <span class="token operator">=</span> Ptr2<span class="token punctuation">;</span>        Ptr2 <span class="token operator">=</span> Ptr2<span class="token operator">-></span>Next<span class="token punctuation">;</span>        old <span class="token operator">=</span> old<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    old<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L1<span class="token operator">-></span>Next <span class="token operator">=</span> L2<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>同sample，交错归并</td><td>答案正确</td><td>9</td><td>3 ms</td><td>184 KB</td></tr><tr><td>1</td><td>两个完全一样的链表</td><td>答案正确</td><td>2</td><td>4 ms</td><td>176 KB</td></tr><tr><td>2</td><td>两个空链表</td><td>答案正确</td><td>2</td><td>3 ms</td><td>192 KB</td></tr><tr><td>3</td><td>L2完全贴在L1后面</td><td>答案正确</td><td>1</td><td>3 ms</td><td>176 KB</td></tr><tr><td>4</td><td>L1完全贴在L2后面</td><td>答案正确</td><td>1</td><td>3 ms</td><td>180 KB</td></tr></tbody></table><h3 id="2-一元多项式的乘法与加法运算"><a href="#2-一元多项式的乘法与加法运算" class="headerlink" title="2.一元多项式的乘法与加法运算"></a><a href="https://pintia.cn/problem-sets/434/problems/5865">2.一元多项式的乘法与加法运算</a></h3><p>设计函数分别求两个一元多项式的乘积与和。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出<code>0 0</code>。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">4 3 4 -5 2  6 1  -2 03 5 20  -7 4  3 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 15 20 -4 4 -5 2 9 1 -2 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>考虑利用链式结构，多项式加法如前，不赘述。</p><p>读入多项式时要注意要不要带头结点，注意零多项式。</p><p>相乘有两种方法，一是将乘法运算转化为加法运算，二是逐项插入。这里考虑逐项插入。</p><p>输出时注意格式，不要有多余的空格。</p><p>free是一个好习惯！</p><h4 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Poly</span> <span class="token operator">*</span>Polynomial<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Poly</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> Coefficient<span class="token punctuation">;</span>    <span class="token keyword">int</span> Exponent<span class="token punctuation">;</span>    Polynomial Next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Insert在rear后面插入，并将rear指向新插入的，因此传rear地址。</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> coe<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">,</span> Polynomial <span class="token operator">*</span>P<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Polynomial Tmp<span class="token punctuation">;</span>    Tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Poly</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Tmp<span class="token operator">-></span>Coefficient <span class="token operator">=</span> coe<span class="token punctuation">;</span>    Tmp<span class="token operator">-></span>Exponent <span class="token operator">=</span> exp<span class="token punctuation">;</span>    Tmp<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token operator">-></span>Next<span class="token punctuation">;</span> <span class="token comment">//实际上是NULL</span>    <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token operator">-></span>Next <span class="token operator">=</span> Tmp<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span> <span class="token operator">=</span> Tmp<span class="token punctuation">;</span> <span class="token comment">// rear指向最后一项多项式</span><span class="token punctuation">&#125;</span>Polynomial <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> coe<span class="token punctuation">,</span> exp<span class="token punctuation">;</span>    Polynomial P<span class="token punctuation">,</span> Rear<span class="token punctuation">,</span> Tmp<span class="token punctuation">;</span>    P <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Poly</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Rear <span class="token operator">=</span> P<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>coe<span class="token punctuation">,</span> <span class="token operator">&amp;</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>coe<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Tmp <span class="token operator">=</span> P<span class="token punctuation">;</span>    P <span class="token operator">=</span> P<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>Tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> P<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Polynomial <span class="token function">SumPolynomial</span><span class="token punctuation">(</span>Polynomial <span class="token keyword">const</span> Poly1<span class="token punctuation">,</span> Polynomial <span class="token keyword">const</span> Poly2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Polynomial PolySum<span class="token punctuation">,</span> Rear<span class="token punctuation">,</span> Tmp<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">;</span>    PolySum <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Poly</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PolySum<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Rear <span class="token operator">=</span> PolySum<span class="token punctuation">;</span>    P1 <span class="token operator">=</span> Poly1<span class="token punctuation">;</span>    P2 <span class="token operator">=</span> Poly2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>P1 <span class="token operator">&amp;&amp;</span> P2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//有一个加完了就结束</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1<span class="token operator">-></span>Exponent <span class="token operator">></span> P2<span class="token operator">-></span>Exponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Insert</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>Coefficient<span class="token punctuation">,</span> P1<span class="token operator">-></span>Exponent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>            P1 <span class="token operator">=</span> P1<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>P1<span class="token operator">-></span>Exponent <span class="token operator">&lt;</span> P2<span class="token operator">-></span>Exponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Insert</span><span class="token punctuation">(</span>P2<span class="token operator">-></span>Coefficient<span class="token punctuation">,</span> P2<span class="token operator">-></span>Exponent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>            P2 <span class="token operator">=</span> P2<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> P1<span class="token operator">-></span>Coefficient <span class="token operator">+</span> P2<span class="token operator">-></span>Coefficient<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">)</span>                <span class="token function">Insert</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> P1<span class="token operator">-></span>Exponent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>            P1 <span class="token operator">=</span> P1<span class="token operator">-></span>Next<span class="token punctuation">;</span>            P2 <span class="token operator">=</span> P2<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> P1<span class="token punctuation">;</span> P1 <span class="token operator">=</span> P1<span class="token operator">-></span>Next<span class="token punctuation">)</span> <span class="token comment">//剩下的直接加</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>Coefficient<span class="token punctuation">,</span> P1<span class="token operator">-></span>Exponent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> P2<span class="token punctuation">;</span> P2 <span class="token operator">=</span> P2<span class="token operator">-></span>Next<span class="token punctuation">)</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>P2<span class="token operator">-></span>Coefficient<span class="token punctuation">,</span> P2<span class="token operator">-></span>Exponent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>    Tmp <span class="token operator">=</span> PolySum<span class="token punctuation">;</span>    PolySum <span class="token operator">=</span> PolySum<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>Tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//临时头结点释放</span>    <span class="token keyword">return</span> PolySum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Polynomial <span class="token function">MultPolynomial</span><span class="token punctuation">(</span>Polynomial <span class="token keyword">const</span> Poly1<span class="token punctuation">,</span> Polynomial <span class="token keyword">const</span> Poly2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Polynomial PolyMult<span class="token punctuation">,</span> Rear<span class="token punctuation">,</span> Tmp<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">;</span>    <span class="token keyword">int</span> coe<span class="token punctuation">,</span> exp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Poly1 <span class="token operator">||</span> <span class="token operator">!</span>Poly2<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    PolyMult <span class="token operator">=</span> <span class="token punctuation">(</span>Polynomial<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Poly</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PolyMult<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Rear <span class="token operator">=</span> PolyMult<span class="token punctuation">;</span>    P1 <span class="token operator">=</span> Poly1<span class="token punctuation">;</span>    P2 <span class="token operator">=</span> Poly2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>P2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// P1最高项和P2相乘得到一个多项式</span>        <span class="token function">Insert</span><span class="token punctuation">(</span>P1<span class="token operator">-></span>Coefficient <span class="token operator">*</span> P2<span class="token operator">-></span>Coefficient<span class="token punctuation">,</span> P1<span class="token operator">-></span>Exponent <span class="token operator">+</span> P2<span class="token operator">-></span>Exponent<span class="token punctuation">,</span>               <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> P2<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    P1 <span class="token operator">=</span> P1<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>P1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//逐项插入</span>        P2 <span class="token operator">=</span> Poly2<span class="token punctuation">;</span>        Rear <span class="token operator">=</span> PolyMult<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>P2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coe <span class="token operator">=</span> P1<span class="token operator">-></span>Coefficient <span class="token operator">*</span> P2<span class="token operator">-></span>Coefficient<span class="token punctuation">;</span>            exp <span class="token operator">=</span> P1<span class="token operator">-></span>Exponent <span class="token operator">+</span> P2<span class="token operator">-></span>Exponent<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>Rear<span class="token operator">-></span>Next <span class="token operator">&amp;&amp;</span> Rear<span class="token operator">-></span>Next<span class="token operator">-></span>Exponent <span class="token operator">></span> exp<span class="token punctuation">)</span>                Rear <span class="token operator">=</span> Rear<span class="token operator">-></span>Next<span class="token punctuation">;</span> <span class="token comment">//找到该插入的位置,rear指向前一位置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Rear<span class="token operator">-></span>Next <span class="token operator">&amp;&amp;</span> Rear<span class="token operator">-></span>Next<span class="token operator">-></span>Exponent <span class="token operator">==</span> exp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Rear<span class="token operator">-></span>Next<span class="token operator">-></span>Coefficient <span class="token operator">+</span> coe<span class="token punctuation">)</span> <span class="token comment">//系数不为0</span>                    Rear<span class="token operator">-></span>Next<span class="token operator">-></span>Coefficient <span class="token operator">+=</span> coe<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//系数为0删除这一项</span>                    Tmp <span class="token operator">=</span> Rear<span class="token operator">-></span>Next<span class="token punctuation">;</span>                    Rear<span class="token operator">-></span>Next <span class="token operator">=</span> Tmp<span class="token operator">-></span>Next<span class="token punctuation">;</span>                    <span class="token function">free</span><span class="token punctuation">(</span>Tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">Insert</span><span class="token punctuation">(</span>coe<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            P2 <span class="token operator">=</span> P2<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        P1 <span class="token operator">=</span> P1<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Tmp <span class="token operator">=</span> PolyMult<span class="token punctuation">;</span>    PolyMult <span class="token operator">=</span> PolyMult<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>Tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除临时头结点</span>    <span class="token keyword">return</span> PolyMult<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PrintPoly</span><span class="token punctuation">(</span>Polynomial P<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>P<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0 0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//非开头打印空格</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> P<span class="token operator">-></span>Coefficient<span class="token punctuation">,</span> P<span class="token operator">-></span>Exponent<span class="token punctuation">)</span><span class="token punctuation">;</span>        P <span class="token operator">=</span> P<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DisposePoly</span><span class="token punctuation">(</span>Polynomial P<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Polynomial Tmp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Tmp <span class="token operator">=</span> P<span class="token punctuation">;</span>        P <span class="token operator">=</span> P<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>Tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Polynomial P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> PS<span class="token punctuation">,</span> PM<span class="token punctuation">;</span>    P1 <span class="token operator">=</span> <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P2 <span class="token operator">=</span> <span class="token function">ReadPoly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PM <span class="token operator">=</span> <span class="token function">MultPolynomial</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span> P2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintPoly</span><span class="token punctuation">(</span>PM<span class="token punctuation">)</span><span class="token punctuation">;</span>    PS <span class="token operator">=</span> <span class="token function">SumPolynomial</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span> P2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintPoly</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DisposePoly</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DisposePoly</span><span class="token punctuation">(</span>PM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DisposePoly</span><span class="token punctuation">(</span>P1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DisposePoly</span><span class="token punctuation">(</span>P2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample换个数字</td><td>答案正确</td><td>12</td><td>3 ms</td><td>168 KB</td></tr><tr><td>1</td><td>同类项合并时有抵消</td><td>答案正确</td><td>4</td><td>3 ms</td><td>304 KB</td></tr><tr><td>2</td><td>系数和指数取上限，结果有零多项式</td><td>答案正确</td><td>2</td><td>3 ms</td><td>320 KB</td></tr><tr><td>3</td><td>输入有零多项式和常数多项式</td><td>答案正确</td><td>2</td><td>3 ms</td><td>188 KB</td></tr></tbody></table><h3 id="3-Reverse-Linked-List"><a href="#3-Reverse-Linked-List" class="headerlink" title="3.Reverse Linked List"></a><a href="https://pintia.cn/problem-sets/16/problems/664">3.Reverse Linked List</a></h3><p>根据某大公司笔试题改编的2014年春季PAT真题</p><p>Given a constant <em>K</em> and a singly linked list <em>L</em>, you are supposed to reverse the links of every <em>K</em> elements on <em>L</em>. For example, given <em>L</em> being 1→2→3→4→5→6, if <em>K</em>=3, then you must output 3→2→1→6→5→4; if <em>K</em>=4, you must output 4→3→2→1→5→6.</p><h4 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive <em>N</em> (≤105) which is the total number of nodes, and a positive <em>K</em> (≤<em>N</em>) which is the length of the sublist to be reversed. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.</p><p>Then <em>N</em> lines follow, each describes a node in the format:</p><pre class="line-numbers language-none"><code class="language-none">Address Data Next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>where <code>Address</code> is the position of the node, <code>Data</code> is an integer, and <code>Next</code> is the position of the next node.</p><h4 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">00100 6 400000 4 9999900100 1 1230968237 6 -133218 3 0000099999 5 6823712309 2 33218<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">00000 4 3321833218 3 1230912309 2 0010000100 1 9999999999 5 6823768237 6 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>这里考虑利用三个数组，先记录下Address、Data、Next，然后将其转化为顺序表存储，再利用数组可以直接方便地逆转。</p><p>特别地，以下还给出一段基于链表的逆转思路</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Ptr <span class="token function">Reverse</span><span class="token punctuation">(</span>Ptr head<span class="token punctuation">,</span> <span class="token keyword">int</span> K<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    new <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    old <span class="token operator">=</span> new<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> K<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> old<span class="token operator">-></span>next<span class="token punctuation">;</span>        old<span class="token operator">-></span>next <span class="token operator">=</span> new<span class="token punctuation">;</span>        new <span class="token operator">=</span> old<span class="token punctuation">;</span>        old <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> old<span class="token punctuation">;</span>    <span class="token keyword">return</span> new<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100005</span></span></span><span class="token keyword">int</span> Data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">,</span> Next<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">,</span> Address<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> FirstAdd<span class="token punctuation">,</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> symbol <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> symbol <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> symbol<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>FirstAdd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmpAdd<span class="token punctuation">,</span> tmpData<span class="token punctuation">,</span> tmpNext<span class="token punctuation">;</span>        tmpAdd <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpData <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpNext <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>tmpAdd<span class="token punctuation">]</span> <span class="token operator">=</span> tmpData<span class="token punctuation">;</span>        Next<span class="token punctuation">[</span>tmpAdd<span class="token punctuation">]</span> <span class="token operator">=</span> tmpNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>FirstAdd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Address<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> FirstAdd<span class="token punctuation">;</span>        FirstAdd <span class="token operator">=</span> Next<span class="token punctuation">[</span>FirstAdd<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt <span class="token operator">-</span> cnt <span class="token operator">%</span> K<span class="token punctuation">;</span> i <span class="token operator">+=</span> K<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> K <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> Address<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>            Address<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> Address<span class="token punctuation">[</span>i <span class="token operator">+</span> K <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Address<span class="token punctuation">[</span>i <span class="token operator">+</span> K <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d %05d\n"</span><span class="token punctuation">,</span> Address<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Data<span class="token punctuation">[</span>Address<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Address<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%05d %d -1\n"</span><span class="token punctuation">,</span> Address<span class="token punctuation">[</span>cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Data<span class="token punctuation">[</span>Address<span class="token punctuation">[</span>cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample 有尾巴不反转, 地址取上下界</td><td>答案正确</td><td>12</td><td>5 ms</td><td>316 KB</td></tr><tr><td>1</td><td>正好全反转</td><td>答案正确</td><td>3</td><td>5 ms</td><td>208 KB</td></tr><tr><td>2</td><td>K=N全反转</td><td>答案正确</td><td>2</td><td>4 ms</td><td>320 KB</td></tr><tr><td>3</td><td>K=1不用反转</td><td>答案正确</td><td>2</td><td>5 ms</td><td>320 KB</td></tr><tr><td>4</td><td>N=1 最小case</td><td>答案正确</td><td>2</td><td>4 ms</td><td>192 KB</td></tr><tr><td>5</td><td>最大N,最后剩K-1不反转</td><td>答案正确</td><td>3</td><td>35 ms</td><td>3132 KB</td></tr><tr><td>6</td><td>有多余结点不在链表上</td><td>答案正确</td><td>1</td><td>4 ms</td><td>320 KB</td></tr></tbody></table><h3 id="4-Pop-Sequence"><a href="#4-Pop-Sequence" class="headerlink" title="4.Pop Sequence"></a><a href="https://pintia.cn/problem-sets/16/problems/665">4.Pop Sequence</a></h3><p>2013年PAT春季考试真题</p><p>Given a stack which can keep <em>M</em> numbers at most. Push <em>N</em> numbers in the order of 1, 2, 3, …, <em>N</em> and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if <em>M</em> is 5 and <em>N</em> is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p><h4 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): <em>M</em> (the maximum capacity of the stack), <em>N</em> (the length of push sequence), and <em>K</em> (the number of pop sequences to be checked). Then <em>K</em> lines follow, each contains a pop sequence of <em>N</em> numbers. All the numbers in a line are separated by a space.</p><h4 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p><h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">5 7 51 2 3 4 5 6 73 2 1 7 5 6 47 6 5 4 3 2 15 6 4 3 7 2 11 7 6 5 4 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">YESNONOYESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>考察是否是一个堆栈的出栈序列，正常模拟堆栈即可，注意堆栈容量。</p><p>首先模拟正常顺序的入栈，若遇到出栈序列的数字则出栈，直至栈容量慢了或全都正常入栈，考察是否全部出栈，若全部出栈则正确，否则错误。</p><h4 id="AC-code-3"><a href="#AC-code-3" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">1001</span></span></span><span class="token keyword">int</span> Stack<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">></span> m<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">&amp;&amp;</span> Stack<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">--</span>top<span class="token punctuation">,</span> <span class="token operator">++</span>cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> n<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample乱序，一般的Y&amp;N</td><td>答案正确</td><td>15</td><td>4 ms</td><td>188 KB</td></tr><tr><td>1</td><td>达到最大size后又溢出</td><td>答案正确</td><td>3</td><td>3 ms</td><td>188 KB</td></tr><tr><td>2</td><td>M==N</td><td>答案正确</td><td>2</td><td>3 ms</td><td>188 KB</td></tr><tr><td>3</td><td>最大数</td><td>答案正确</td><td>2</td><td>3 ms</td><td>192 KB</td></tr><tr><td>4</td><td>最小数</td><td>答案正确</td><td>1</td><td>3 ms</td><td>192 KB</td></tr><tr><td>5</td><td>卡特殊错误算法（通过比较大小判断）</td><td>答案正确</td><td>2</td><td>3 ms</td><td>192 KB</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构week1</title>
      <link href="2021/072849324.html"/>
      <url>2021/072849324.html</url>
      
        <content type="html"><![CDATA[<h1 id="Week1基本概念"><a href="#Week1基本概念" class="headerlink" title="Week1基本概念"></a>Week1基本概念</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以下内容均综合整理自浙江大学数据结构慕课，包括后续同tag文章。</p><h2 id="1-1什么是数据结构"><a href="#1-1什么是数据结构" class="headerlink" title="1.1什么是数据结构"></a>1.1什么是数据结构</h2><h3 id="没有官方统一定义"><a href="#没有官方统一定义" class="headerlink" title="没有官方统一定义"></a>没有官方统一定义</h3><p><strong>“数据结构是数据对象以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。“</strong>                                                                                                                                            <strong>——Sartaj Sahni，《数据结构、算法与应用》</strong><br> <strong>“数据结构是ADT（抽象数据类型 Abstract DataType）的物理实现。 ”            ——Clifford A.Shaffer，《数据结构与算法分析》</strong><br> <strong>“数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。 ”</strong>                                                                                                                                                                                                <strong>——中文维基百科</strong></p><h4 id="1-解决问题方法的效率，跟数据的组织方式有关。"><a href="#1-解决问题方法的效率，跟数据的组织方式有关。" class="headerlink" title="1.解决问题方法的效率，跟数据的组织方式有关。"></a><strong>1.解决问题方法的效率，跟数据的组织方式有关。</strong></h4><p>例1：如何在书架上摆放图书？                                                                                                                                                                                图书的摆放要使得2个相关操作方便实现：<br>操作1：新书怎么插入？（1.随便放 2.按拼音字母顺序 3.划分类别+拼音字母顺序）<br>操作2：怎么找到某本指定的书？ （1.累死 2.二分查找 3.定类别+二分）</p><h4 id="2-解决问题方法的效率，跟空间的利用效率有关。"><a href="#2-解决问题方法的效率，跟空间的利用效率有关。" class="headerlink" title="2.解决问题方法的效率，跟空间的利用效率有关。"></a><strong>2.解决问题方法的效率，跟空间的利用效率有关。</strong></h4><p>例2：写程序实现一个函数PrintN，使得传入一个正整数为N的参数后，能顺序打印从1到N的全部正整数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//循环实现</span><span class="token keyword">void</span> <span class="token function">PrintN1</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“ <span class="token operator">%</span> d\n”<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//递归实现</span><span class="token keyword">void</span> <span class="token function">PrintN2</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">PrintN</span><span class="token punctuation">(</span>N – <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span>“ <span class="token operator">%</span> d\n”<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>令 N = 100, 1000, 10000, 10000 测试效率。</p><h4 id="3-解决问题方法的效率，跟算法的巧妙程度有关。"><a href="#3-解决问题方法的效率，跟算法的巧妙程度有关。" class="headerlink" title="3.解决问题方法的效率，跟算法的巧妙程度有关。"></a><strong>3.解决问题方法的效率，跟算法的巧妙程度有关。</strong></h4><p>例3：写程序计算给定多项式在给定点x处的值 $f(x)=a_0+a_1x+\cdots+a_{n-1}x^{n-1}+a_nx^n$</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">double</span> p <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$f(x)=a_0+x(a_1+x(\cdots(a_{n-1}+x(a_n))\cdots))$</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">double</span> p <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>p <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x <span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token comment">//clock()：捕捉从程序开始运行到clock()被调用时所耗费的时间。这个时间单位是clock tick，即“时钟打点”。</span><span class="token comment">//常数CLK_TCK(或CLOCKS_PER_SEC)：机器时钟每秒所走的时钟打点数。</span><span class="token class-name">clock_t</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">;</span><span class="token keyword">double</span> duration<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXK</span> <span class="token expression"><span class="token number">1e7</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXK<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">f1</span><span class="token punctuation">(</span>MAXN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stop <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    duration <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stop <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLK_TCK <span class="token operator">/</span> MAXK<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ticks1 = %f\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stop <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"duration1 = %6.2e\n"</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXK<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">f2</span><span class="token punctuation">(</span>MAXN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stop <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    duration <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stop <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLK_TCK <span class="token operator">/</span> MAXK<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ticks1 = %f\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stop <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"duration1 = %6.2e\n"</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*ticks1 = 1725.000000duration1 = 1.73e-07ticks1 = 288.000000 duration1 = 2.88e-08*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让被测函数重复运行多次，使得测出的总的时钟打点间隔充分长，最后计算被测函数平均每次运行的时间，即可进行时间效率测试!</p><h3 id="所以什么是数据结构"><a href="#所以什么是数据结构" class="headerlink" title="所以什么是数据结构?"></a>所以什么是数据结构?</h3><p><strong>数据对象在计算机中的组织方式 1.逻辑结构 2.物理存储结构</strong></p><p><strong>数据对象必定与一系列加在其上的操作相关联，完成这些操作所用的方法就是算法</strong>  </p><p><strong>抽象数据类型（Abstract Data Type）</strong><br><strong>1.数据类型  2.数据对象集 3.数据集合相关联的操作集</strong><br>抽象：描述数据类型的方法不依赖于具体实现,与存放数据的机器无关,与数据存储的物理结构无关,与实现操作的算法和编程语言均无关<br>只描述数据对象集和相关操作集“是什么”，并不涉及“如何做到”的问题。</p><p>例4： “矩阵”的抽象数据类型定义<br><strong>类型名称</strong>： 矩阵（Matrix）<br>数据对象集： 一个$M\times N$​的矩阵$A_{M\times N}$​ = $(a_{ij})(i=1,\cdots,M;j=1,\cdots,N)$​​由$M\times N$​​个三元组$&lt; a, i, j &gt;$构成，其中a是矩阵元素的值， i是元素所在的行号， j是元素所在的列号。<br><strong>操作集</strong>： 对于任意矩阵$A、 B、 C \in Matrix$，以及整数$i、 j、 M、 N$                                                                                                               </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Matrix <span class="token function">Create</span><span class="token punctuation">(</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N <span class="token punctuation">)</span><span class="token comment">//返回一个M×N的空矩阵；</span><span class="token keyword">int</span> <span class="token function">GetMaxRow</span><span class="token punctuation">(</span> Matrix A <span class="token punctuation">)</span><span class="token comment">//返回矩阵A的总行数；</span><span class="token keyword">int</span> <span class="token function">GetMaxCol</span><span class="token punctuation">(</span> Matrix A <span class="token punctuation">)</span><span class="token comment">//返回矩阵A的总列数；</span>ElementType <span class="token function">GetEntry</span><span class="token punctuation">(</span> Matrix A<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j <span class="token punctuation">)</span><span class="token comment">//返回矩阵A的第i行、第j列的元素；</span>Matrix <span class="token function">Add</span><span class="token punctuation">(</span> Matrix A<span class="token punctuation">,</span> Matrix B <span class="token punctuation">)</span><span class="token comment">//如果A和B的行、列数一致，则返回矩阵C=A+B，否则返回错误标志；</span>Matrix <span class="token function">Multiply</span><span class="token punctuation">(</span> Matrix A<span class="token punctuation">,</span> Matrix B <span class="token punctuation">)</span><span class="token comment">//如果A的列数等于B的行数，则返回矩阵C=AB，否则返回错误标志；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Q：矩阵用什么存储？二维数组？一维数组？十字链表？加法如何执行？先按行加？先按列加？什么语言？  </p><h2 id="1-2-什么是算法"><a href="#1-2-什么是算法" class="headerlink" title="1.2 什么是算法"></a>1.2 什么是算法</h2><h3 id="算法（Algorithm）"><a href="#算法（Algorithm）" class="headerlink" title="算法（Algorithm）"></a><strong>算法（Algorithm）</strong></h3><p>（1）一个有限指令集 接受一些输入（有些情况下不需要输入）<br>（2）产生输出<br>（3）一定在有限步骤之后终止<br>（4）每一条指令必须  </p><p>1.有充分明确的目标，不可以有歧义 2.计算机能处理的范围之内 3.描述应不依赖于任何一种计算机语言以及具体的实现手段 </p><p>例1：选择排序算法的伪码描述</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SelectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> List<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* 将N个整数List[0]...List[N-1]进行非递减排序 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>MinPosition <span class="token operator">=</span> <span class="token function">ScanForMin</span><span class="token punctuation">(</span>List<span class="token punctuation">,</span> i<span class="token punctuation">,</span> N–<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 从List[i]到List[N–1]中找最小元，并将其位置赋给MinPosition */</span><span class="token function">Swap</span><span class="token punctuation">(</span>List<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> List<span class="token punctuation">[</span>MinPosition<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 将未排序部分的最小元换到有序部分的最后位置 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象——List到底是数组还是链表（虽然看上去很像数组？Swap用函数还是用宏去实现？  </p><h3 id="什么是好的算法？"><a href="#什么是好的算法？" class="headerlink" title="什么是好的算法？"></a>什么是好的算法？</h3><p>1.<strong>空间复杂度$S(n)$</strong> —— 根据算法写成的程序在执行时<strong>占用存储单元的长度</strong>。这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限，造成程序非正常中断。 </p><p>2.<strong>时间复杂度$T(n)$</strong> —— 根据算法写成的程序在执行时<strong>耗费时间的长度</strong>。这个长度往往也与输入数据的规模有关。时间复杂度过高的低效算法可能导致我们在有生之年都等不到运行结果。  </p><p>例2：递归实现的PrintN2 $S(N) = C · N$  f1 $T(n) = C_1n^2+C_2n$  f2 $T(n) = C · n$</p><p>什么是好的算法？<br>在分析一般算法的效率时，我们经常关注下面两种复杂度: 1.最坏情况复杂度 $T_{worst}( n )$  2.平均复杂度 $T_{avg}( n )$<br>$$<br>T_{avg}(n)\leq T_{worst}(n)<br>$$</p><h4 id="复杂度的渐进表示法"><a href="#复杂度的渐进表示法" class="headerlink" title="复杂度的渐进表示法"></a>复杂度的渐进表示法</h4><p>$T(n) = O(f(n))$​ 表示存在常数$C &gt;0, n_0&gt;0$​ 使得当$n\geq n_0$​ 时有$T(n) \leq C·f(n)$​​<br>$T(n) = Ω(g(n))$ 表示存在常数$C &gt;0, n_0&gt;0$ 使得当$n\geq n_0$ 时有$T(n) \geq C·g(n)$​<br>$T(n) = Θ (h(n))$ 表示同时有$T(n) = O(h(n))$ 和$T(n) = Ω(h(n))$</p><h4 id="复杂度分析小窍门"><a href="#复杂度分析小窍门" class="headerlink" title="复杂度分析小窍门"></a>复杂度分析小窍门</h4><p>若两段算法分别有复杂度$T_1(n) = O(f_1(n))$​​ 和$T_2(n) =O(f_2(n))$​​，则                                                                                                                                    $T1(n) + T2(n) = max( O(f_1(n))$​​,$ O(f_2(n)) )\qquad  T_1(n) \times T_2(n) = O( f1(n) \times f2(n) )$​​<br>若$T(n)$​是关于n的k阶多项式，那么$T(n)=Θ (n^k)$​​<br>一个for循环的时间复杂度等于循环次数乘以循环体代码的复杂度<br>if-else 结构的复杂度取决于 if的条件判断复杂度和两个分支部分的复杂度，总体复杂度取三者中最大  </p><h2 id="1-3-应用实例：最大子列和问题"><a href="#1-3-应用实例：最大子列和问题" class="headerlink" title="1.3 应用实例：最大子列和问题"></a>1.3 应用实例：最大子列和问题</h2><p>给定N个整数的序列${ A_1, A_2, …, A_N}$​，求函数$f(i,j)=max(0,\sum_{k=i}^jA_k)$​ 的最大值。  </p><h3 id="算法1-T-N-O-N-3"><a href="#算法1-T-N-O-N-3" class="headerlink" title="算法1  $T( N ) = O( N^3 )$"></a>算法1  $T( N ) = O( N^3 )$</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MaxSubseqSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ThisSum<span class="token punctuation">,</span> MaxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* i是子列左端位置 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* j是子列右端位置 */</span>ThisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* ThisSum是从A[i]到A[j]的子列和 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>ThisSum <span class="token operator">+=</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">></span> MaxSum<span class="token punctuation">)</span> <span class="token comment">/* 如果刚得到的这个子列和更大 */</span>MaxSum <span class="token operator">=</span> ThisSum<span class="token punctuation">;</span> <span class="token comment">/* 则更新结果 */</span><span class="token punctuation">&#125;</span> <span class="token comment">/* j循环结束 */</span><span class="token punctuation">&#125;</span> <span class="token comment">/* i循环结束 */</span><span class="token keyword">return</span> MaxSum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法2-T-N-O-N-2-​"><a href="#算法2-T-N-O-N-2-​" class="headerlink" title="算法2  $T( N ) = O( N^2 )$​"></a>算法2  $T( N ) = O( N^2 )$​</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MaxSubseqSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ThisSum<span class="token punctuation">,</span> MaxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* i是子列左端位置 */</span>ThisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* ThisSum是从A[i]到A[j]的子列和 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* j是子列右端位置 */</span>ThisSum <span class="token operator">+=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*对于相同的i，不同的j，只要在j-1次循环的基础上累加1项即可*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">></span> MaxSum<span class="token punctuation">)</span> <span class="token comment">/* 如果刚得到的这个子列和更大 */</span>MaxSum <span class="token operator">=</span> ThisSum<span class="token punctuation">;</span> <span class="token comment">/* 则更新结果 */</span><span class="token punctuation">&#125;</span> <span class="token comment">/* j循环结束 */</span><span class="token punctuation">&#125;</span> <span class="token comment">/* i循环结束 */</span><span class="token keyword">return</span> MaxSum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法3：分而治之"><a href="#算法3：分而治之" class="headerlink" title="算法3：分而治之"></a>算法3：分而治之</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Max3</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">,</span> <span class="token keyword">int</span> C<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 返回3个整数中的最大值 */</span>    <span class="token keyword">return</span> A <span class="token operator">></span> B <span class="token operator">?</span> A <span class="token operator">></span> C <span class="token operator">?</span> A <span class="token operator">:</span> C <span class="token operator">:</span> B <span class="token operator">></span> C <span class="token operator">?</span> B <span class="token operator">:</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> Left<span class="token punctuation">,</span> <span class="token keyword">int</span> Right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 分治法求A[Left]到A[Right]的最大子列和 */</span>    <span class="token keyword">int</span> MaxLeftSum<span class="token punctuation">,</span> MaxRightSum<span class="token punctuation">;</span>             <span class="token comment">/* 存放左右子问题的解 */</span>    <span class="token keyword">int</span> MaxLeftBorderSum<span class="token punctuation">,</span> MaxRightBorderSum<span class="token punctuation">;</span> <span class="token comment">/*存放跨分界线的结果*/</span>    <span class="token keyword">int</span> LeftBorderSum<span class="token punctuation">,</span> RightBorderSum<span class="token punctuation">;</span>    <span class="token keyword">int</span> Center<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Left <span class="token operator">==</span> Right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 递归的终止条件，子列只有1个数字 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>Left<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span>Left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 下面是"分"的过程 */</span>    Center <span class="token operator">=</span> <span class="token punctuation">(</span>Left <span class="token operator">+</span> Right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">/* 找到中分点 */</span>    <span class="token comment">/* 递归求得两边子列的最大和 */</span>    MaxLeftSum <span class="token operator">=</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> Left<span class="token punctuation">,</span> Center<span class="token punctuation">)</span><span class="token punctuation">;</span>    MaxRightSum <span class="token operator">=</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> Center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 下面求跨分界线的最大子列和 */</span>    MaxLeftBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LeftBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> Center<span class="token punctuation">;</span> i <span class="token operator">>=</span> Left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 从中线向左扫描 */</span>        LeftBorderSum <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LeftBorderSum <span class="token operator">></span> MaxLeftBorderSum<span class="token punctuation">)</span>            MaxLeftBorderSum <span class="token operator">=</span> LeftBorderSum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">/* 左边扫描结束 */</span>    MaxRightBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    RightBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> Center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 从中线向右扫描 */</span>        RightBorderSum <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RightBorderSum <span class="token operator">></span> MaxRightBorderSum<span class="token punctuation">)</span>            MaxRightBorderSum <span class="token operator">=</span> RightBorderSum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">/* 右边扫描结束 */</span>    <span class="token comment">/* 下面返回"治"的结果 */</span>    <span class="token keyword">return</span> <span class="token function">Max3</span><span class="token punctuation">(</span>MaxLeftSum<span class="token punctuation">,</span> MaxRightSum<span class="token punctuation">,</span> MaxLeftBorderSum <span class="token operator">+</span> MaxRightBorderSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">MaxSubsequenceSum3</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 保持与前2种算法相同的函数接口 */</span>    <span class="token keyword">return</span> <span class="token function">MaxSubSum</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\begin{aligned}<br>    T(N)&amp;=2T(N/2)+cN,\qquad T(1)=O(1) \newline<br>        &amp;=2[2T(N/2^2)+c(N/2)]+cN \newline<br>        &amp;=2^kO(1)+ckN,\qquad N/2^k=1 \newline<br>        &amp;=O(NlogN)<br>\end{aligned}<br>$$</p><h4 id="算法4：在线处理-T-N-O-N"><a href="#算法4：在线处理-T-N-O-N" class="headerlink" title="算法4：在线处理  $T( N ) = O( N )  $"></a>算法4：在线处理  $T( N ) = O( N )  $</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">MaxSubsequenceSum4</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ThisSum<span class="token punctuation">,</span> MaxSum<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    ThisSum <span class="token operator">=</span> MaxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ThisSum <span class="token operator">+=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* 向右累加 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">></span> MaxSum<span class="token punctuation">)</span>            MaxSum <span class="token operator">=</span> ThisSum<span class="token punctuation">;</span> <span class="token comment">/* 发现更大和则更新当前结果 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">/* 如果当前子列和为负 */</span>            ThisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 则不可能使后面的部分和增大，抛弃之 */</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> MaxSum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“在线”的意思是指每输入一个数据就进行即时处理，在任何一个地方中止输入，算法都能正确给出当前的解。  </p><h2 id="编程习题"><a href="#编程习题" class="headerlink" title="编程习题"></a>编程习题</h2><h3 id="1-最大子列和问题"><a href="#1-最大子列和问题" class="headerlink" title="1.最大子列和问题"></a><a href="https://pintia.cn/problem-sets/434/problems/5404">1.<strong>最大子列和问题</strong></a></h3><p>给定<em>K</em>个整数组成的序列$\{ N_1, N_2, …, N_K \}$​​​​​​​​​​​​​​​​，“连续子列”被定义为$\{ N_i, N_{i+1}, …, N_j \}$​​​​​​​​​​​​​​​​​，其中 $1≤i≤j≤K$​​​​​​​​​​​​​​​​。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列$\{ -2, 11, -4, 13, -5, -2\}$​​​​​​​​​​​​​​，其连续子列$\{ 11, -4, 13 \}$​​​​​​​​​​​​​​有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。</p><p>本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：</p><ul><li>数据1：与样例等价，测试基本正确性；</li><li>数据2：$10^2$个随机整数；</li><li>数据3：$10^3$个随机整数；</li><li>数据4：$10^4$个随机整数；</li><li>数据5：$10^5$个随机整数；</li></ul><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h4><p>输入第1行给出正整数<em>K</em> (≤100000)；第2行给出<em>K</em>个整数，其间以空格分隔。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h4><p>在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">6-2 11 -4 13 -5 -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>最大子列和问题前述4种算法，用在线处理算法+快读可达到较好效率。</p><h4 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> symbol <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>            symbol <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> symbol<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> K<span class="token punctuation">,</span> ThisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MaxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">;</span>    K <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        num <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThisSum <span class="token operator">+=</span> num<span class="token punctuation">;</span> <span class="token comment">/* 向右累加 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">></span> MaxSum<span class="token punctuation">)</span>            MaxSum <span class="token operator">=</span> ThisSum<span class="token punctuation">;</span> <span class="token comment">/* 发现更大和则更新当前结果 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">/* 如果当前子列和为负 */</span>            ThisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 则不可能使后面的部分和增大，抛弃之 */</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> MaxSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample 有正负，负数开头结尾，最大和有更新</td><td>答案正确</td><td>12</td><td>3 ms</td><td>328 KB</td></tr><tr><td>1</td><td>100个随机数</td><td>答案正确</td><td>2</td><td>4 ms</td><td>196 KB</td></tr><tr><td>2</td><td>1000个随机数</td><td>答案正确</td><td>2</td><td>4 ms</td><td>192 KB</td></tr><tr><td>3</td><td>10000个随机数</td><td>答案正确</td><td>2</td><td>4 ms</td><td>188 KB</td></tr><tr><td>4</td><td>100000个随机数</td><td>答案正确</td><td>2</td><td>5 ms</td><td>184 KB</td></tr></tbody></table><h3 id="2-Maximum-Subsequence-Sum（2004年浙江大学计算机专业考研复试真题）"><a href="#2-Maximum-Subsequence-Sum（2004年浙江大学计算机专业考研复试真题）" class="headerlink" title="2.Maximum Subsequence Sum（2004年浙江大学计算机专业考研复试真题）"></a><a href="https://pintia.cn/problem-sets/16/problems/663">2.<strong>Maximum Subsequence Sum</strong>（2004年浙江大学计算机专业考研复试真题）</a></h3><p>Given a sequence of <em>K</em> integers$\{N_1, N_2, …, N_K \}$​. A continuous subsequence is defined to be$\{ N_i, N_{i+1}, …, N_j \}$​where$1≤i≤j≤K$​.The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence$\{-2, 11, -4, 13, -5, -2 \}$​, its maximum subsequence is $\{ 11, -4, 13 \}$​​​​​​​ with the largest sum being 20.</p><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p><h4 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h4><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer <em>K</em> (≤10000). The second line contains <em>K</em> numbers, separated by a space.</p><h4 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h4><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices <em>i</em> and <em>j</em> （as shown by the sample case）. If all the <em>K</em> numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">10-10 1 2 3 4 -5 -23 3 7 -21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">10 1 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>最大子列和问题变形，还要求输出最大子列开头和结尾的数字。</p><p>首先为了避免开数组用两个变量记住开头和结尾的数字，处理全负情况。</p><p>考虑对每一段可能的最大子列开头，其先前的累加和ThisSum一定为负，利用一个start标记是否是某一段开头，当ThisSum &lt; 0则start置零；对于结尾，由于它是(当前)最大子列，只需要在ThisSum &gt; MaxSum（这也保证了多解时输出第一组）时更新结尾和开头数字。   </p><p>注意一类特殊情况，负数和0，其最大子列和为0，但是开头和结尾数字也应该是0，因此开始的MaxSum不能为0.            </p><p>全负当且仅当开头和结尾数字为初值(-1)。</p><h4 id="AC-code-1"><a href="#AC-code-1" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> symbol <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>            symbol <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> symbol<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> K<span class="token punctuation">,</span> ThisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MaxSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    K <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> _begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        num <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            _begin <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            _end <span class="token operator">=</span> num<span class="token punctuation">;</span>        ThisSum <span class="token operator">+=</span> num<span class="token punctuation">;</span> <span class="token comment">/* 向右累加 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>start <span class="token operator">&amp;&amp;</span> ThisSum <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> num<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">></span> MaxSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            MaxSum <span class="token operator">=</span> ThisSum<span class="token punctuation">;</span> <span class="token comment">/* 发现更大和则更新当前结果 */</span>            begin <span class="token operator">=</span> first<span class="token punctuation">,</span> end <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ThisSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">/* 如果当前子列和为负 */</span>            ThisSum <span class="token operator">=</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 则不可能使后面的部分和增大，抛弃之 */</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> MaxSum<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _begin<span class="token punctuation">,</span> _end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample换1个数字。有正负，负数开头结尾，有并列最大和</td><td>答案正确</td><td>13</td><td>4 ms</td><td>176 KB</td></tr><tr><td>1</td><td>最大和序列中有负数</td><td>答案正确</td><td>2</td><td>4 ms</td><td>292 KB</td></tr><tr><td>2</td><td>并列和对应相同i但是不同j，即尾是0</td><td>答案正确</td><td>2</td><td>3 ms</td><td>296 KB</td></tr><tr><td>3</td><td>1个正数</td><td>答案正确</td><td>2</td><td>3 ms</td><td>188 KB</td></tr><tr><td>4</td><td>全是负数</td><td>答案正确</td><td>2</td><td>4 ms</td><td>176 KB</td></tr><tr><td>5</td><td>负数和0</td><td>答案正确</td><td>2</td><td>3 ms</td><td>320 KB</td></tr><tr><td>6</td><td>最大和前面有一段是0</td><td>答案正确</td><td>1</td><td>3 ms</td><td>196 KB</td></tr><tr><td>7</td><td>最大N</td><td>答案正确</td><td>1</td><td>4 ms</td><td>172 KB</td></tr></tbody></table><h3 id="3-二分查找"><a href="#3-二分查找" class="headerlink" title="3.二分查找"></a><a href="https://pintia.cn/problem-sets/434/problems/965458856133562368">3.<strong>二分查找</strong></a></h3><p>本题要求实现二分查找算法。</p><h4 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Position BinarySearch( List L, ElementType X );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>List</code>结构定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Position<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>List<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token punctuation">&#123;</span>    ElementType Data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    Position Last<span class="token punctuation">;</span> <span class="token comment">/* 保存线性表中最后一个元素的位置 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>L</code>是用户传入的一个线性表，其中<code>ElementType</code>元素可以通过&gt;、==、&lt;进行比较，并且题目保证传入的数据是递增有序的。函数<code>BinarySearch</code>要查找<code>X</code>在<code>Data</code>中的位置，即数组下标（注意：元素从下标1开始存储）。找到则返回下标，否则返回一个特殊的失败标记<code>NotFound</code>。</p><h4 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NotFound</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElementType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Position<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>List<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token punctuation">&#123;</span>    ElementType Data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    Position Last<span class="token punctuation">;</span> <span class="token comment">/* 保存线性表中最后一个元素的位置 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>List <span class="token function">ReadInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 裁判实现，细节不表。元素从下标1开始存储 */</span>Position <span class="token function">BinarySearch</span><span class="token punctuation">(</span> List L<span class="token punctuation">,</span> ElementType X <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    List L<span class="token punctuation">;</span>    ElementType X<span class="token punctuation">;</span>    Position P<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token function">ReadInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>    P <span class="token operator">=</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> X <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> P<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 你的代码将被嵌在这里 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">512 31 55 89 10131<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><pre class="line-numbers language-in" data-language="in"><code class="language-in">326 78 23331<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><pre class="line-numbers language-out" data-language="out"><code class="language-out">0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>基础二分查找，注意函数要与裁判程序契合即可。</p><h4 id="AC-code-2"><a href="#AC-code-2" class="headerlink" title="AC code"></a>AC code</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">Position <span class="token function">BinarySearch</span><span class="token punctuation">(</span>List L<span class="token punctuation">,</span> ElementType X<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Position left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> L<span class="token operator">-></span>Last<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Position mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">==</span> L<span class="token operator">-></span>Data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">></span> L<span class="token operator">-></span>Data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> NotFound<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>测试点</th><th>提示</th><th>结果</th><th>分数</th><th>耗时</th><th>内存</th></tr></thead><tbody><tr><td>0</td><td>sample1 等价</td><td>答案正确</td><td>10</td><td>3 ms</td><td>192 KB</td></tr><tr><td>1</td><td>sample2 等价，但NotFound重新定义</td><td>答案正确</td><td>2</td><td>3 ms</td><td>192 KB</td></tr><tr><td>2</td><td>奇数个，正中间找到，MAXSIZE重新定义</td><td>答案正确</td><td>1</td><td>3 ms</td><td>188 KB</td></tr><tr><td>3</td><td>偶数个，正中间找到</td><td>答案正确</td><td>1</td><td>3 ms</td><td>192 KB</td></tr><tr><td>4</td><td>大数据，在头部找到</td><td>答案正确</td><td>2</td><td>16 ms</td><td>704 KB</td></tr><tr><td>5</td><td>大数据，在尾部找到</td><td>答案正确</td><td>2</td><td>14 ms</td><td>584 KB</td></tr><tr><td>6</td><td>大数据，找不到</td><td>答案正确</td><td>2</td><td>14 ms</td><td>576 KB</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crypto函数库</title>
      <link href="2021/041039666.html"/>
      <url>2021/041039666.html</url>
      
        <content type="html"><![CDATA[<h2 id="READ-ME"><a href="#READ-ME" class="headerlink" title="READ ME"></a>READ ME</h2><p>1.本文整理了CTF中Crypto部分可能用到的一些函数，主要是古典密码。事实上绝大部分古典密码都有在线的解密网站，python中的一些库也有不少加/解密函数，以下函数均为为库函数中没有的。之所以做一个这样的整理，还是因为现在古典密码都是套娃加密，在涉及爆破时，在线网站无疑很费劲，因此有一个自己的库函数就显得很有必要。</p><p>2.本文的函数原理部分并无注释，但是绝大部分经过实践检验，如果出现错误，后续会更正（咕咕咕）。</p><p>3.有一些函数接口单一。举个栗子，my_base64_decode只接受字典，因此使用的时候需要将字符集改成字典的结构，当然也可以对源码进行魔改。</p><p>4.下文的凯撒加解密函数其实并不是通常意义下的，有相关需求只需对源代码进行简单修改即可。</p><p>5.以下除了仿射密码使用了gmpy2的invert函数，其余都不需要额外使用任何库。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">alphabet_to_morse <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token string">".-"</span><span class="token punctuation">,</span>    <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token string">"-..."</span><span class="token punctuation">,</span>    <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token string">"-.-."</span><span class="token punctuation">,</span>    <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token string">"-.."</span><span class="token punctuation">,</span>    <span class="token string">"E"</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token string">"F"</span><span class="token punctuation">:</span> <span class="token string">"..-."</span><span class="token punctuation">,</span>    <span class="token string">"G"</span><span class="token punctuation">:</span> <span class="token string">"--."</span><span class="token punctuation">,</span>    <span class="token string">"H"</span><span class="token punctuation">:</span> <span class="token string">"...."</span><span class="token punctuation">,</span>    <span class="token string">"I"</span><span class="token punctuation">:</span> <span class="token string">".."</span><span class="token punctuation">,</span>    <span class="token string">"J"</span><span class="token punctuation">:</span> <span class="token string">".---"</span><span class="token punctuation">,</span>    <span class="token string">"K"</span><span class="token punctuation">:</span> <span class="token string">"-.-"</span><span class="token punctuation">,</span>    <span class="token string">"L"</span><span class="token punctuation">:</span> <span class="token string">".-.."</span><span class="token punctuation">,</span>    <span class="token string">"M"</span><span class="token punctuation">:</span> <span class="token string">"--"</span><span class="token punctuation">,</span>    <span class="token string">"N"</span><span class="token punctuation">:</span> <span class="token string">"-."</span><span class="token punctuation">,</span>    <span class="token string">"O"</span><span class="token punctuation">:</span> <span class="token string">"---"</span><span class="token punctuation">,</span>    <span class="token string">"P"</span><span class="token punctuation">:</span> <span class="token string">".--."</span><span class="token punctuation">,</span>    <span class="token string">"Q"</span><span class="token punctuation">:</span> <span class="token string">"--.-"</span><span class="token punctuation">,</span>    <span class="token string">"R"</span><span class="token punctuation">:</span> <span class="token string">".-."</span><span class="token punctuation">,</span>    <span class="token string">"S"</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>    <span class="token string">"T"</span><span class="token punctuation">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span>    <span class="token string">"U"</span><span class="token punctuation">:</span> <span class="token string">"..-"</span><span class="token punctuation">,</span>    <span class="token string">"V"</span><span class="token punctuation">:</span> <span class="token string">"...-"</span><span class="token punctuation">,</span>    <span class="token string">"W"</span><span class="token punctuation">:</span> <span class="token string">".--"</span><span class="token punctuation">,</span>    <span class="token string">"X"</span><span class="token punctuation">:</span> <span class="token string">"-..-"</span><span class="token punctuation">,</span>    <span class="token string">"Y"</span><span class="token punctuation">:</span> <span class="token string">"-.--"</span><span class="token punctuation">,</span>    <span class="token string">"Z"</span><span class="token punctuation">:</span> <span class="token string">"--.."</span><span class="token punctuation">,</span>    <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token string">"-----"</span><span class="token punctuation">,</span>    <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token string">".----"</span><span class="token punctuation">,</span>    <span class="token string">"2"</span><span class="token punctuation">:</span> <span class="token string">"..---"</span><span class="token punctuation">,</span>    <span class="token string">"3"</span><span class="token punctuation">:</span> <span class="token string">"...--"</span><span class="token punctuation">,</span>    <span class="token string">"4"</span><span class="token punctuation">:</span> <span class="token string">"....-"</span><span class="token punctuation">,</span>    <span class="token string">"5"</span><span class="token punctuation">:</span> <span class="token string">"....."</span><span class="token punctuation">,</span>    <span class="token string">"6"</span><span class="token punctuation">:</span> <span class="token string">"-...."</span><span class="token punctuation">,</span>    <span class="token string">"7"</span><span class="token punctuation">:</span> <span class="token string">"--..."</span><span class="token punctuation">,</span>    <span class="token string">"8"</span><span class="token punctuation">:</span> <span class="token string">"---.."</span><span class="token punctuation">,</span>    <span class="token string">"9"</span><span class="token punctuation">:</span> <span class="token string">"----."</span><span class="token punctuation">,</span>    <span class="token string">"."</span><span class="token punctuation">:</span> <span class="token string">".-.-.-"</span><span class="token punctuation">,</span>    <span class="token string">","</span><span class="token punctuation">:</span> <span class="token string">"--..--"</span><span class="token punctuation">,</span>    <span class="token string">":"</span><span class="token punctuation">:</span> <span class="token string">"---..."</span><span class="token punctuation">,</span>    <span class="token string">";"</span><span class="token punctuation">:</span> <span class="token string">"-.-.-."</span><span class="token punctuation">,</span>    <span class="token string">"?"</span><span class="token punctuation">:</span> <span class="token string">"..--.."</span><span class="token punctuation">,</span>    <span class="token string">"-"</span><span class="token punctuation">:</span> <span class="token string">"-....-"</span><span class="token punctuation">,</span>    <span class="token string">"_"</span><span class="token punctuation">:</span> <span class="token string">"..--.-"</span><span class="token punctuation">,</span>    <span class="token string">"("</span><span class="token punctuation">:</span> <span class="token string">"-.--."</span><span class="token punctuation">,</span>    <span class="token string">")"</span><span class="token punctuation">:</span> <span class="token string">"-.--.-"</span><span class="token punctuation">,</span>    <span class="token string">"="</span><span class="token punctuation">:</span> <span class="token string">"-...-"</span><span class="token punctuation">,</span>    <span class="token string">"+"</span><span class="token punctuation">:</span> <span class="token string">".-.-."</span><span class="token punctuation">,</span>    <span class="token string">"/"</span><span class="token punctuation">:</span> <span class="token string">"-..-."</span><span class="token punctuation">,</span>    <span class="token string">"@"</span><span class="token punctuation">:</span> <span class="token string">".--.-."</span><span class="token punctuation">,</span>    <span class="token string">"$"</span><span class="token punctuation">:</span> <span class="token string">"...-..-"</span><span class="token punctuation">,</span>    <span class="token string">"&amp;"</span><span class="token punctuation">:</span> <span class="token string">"...."</span><span class="token punctuation">,</span>    <span class="token string">"'"</span><span class="token punctuation">:</span> <span class="token string">".----."</span><span class="token punctuation">,</span>    <span class="token string">"!"</span><span class="token punctuation">:</span> <span class="token string">"-.-.--"</span><span class="token punctuation">,</span>    <span class="token string">'"'</span><span class="token punctuation">:</span> <span class="token string">".-..-."</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>morse_to_alphabet <span class="token operator">=</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> alphabet_to_morse<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">morseencode</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Morse cipher encryption function    Example::        encoded='.----/-..../...--/--.../-..'        print(morsedecode(encoded))    prints::        1637D    """</span>    morsestring <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    decoded <span class="token operator">=</span> decoded<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> decoded<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>        letters <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>        morseword <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> letter <span class="token keyword">in</span> letters<span class="token punctuation">:</span>            morseletter <span class="token operator">=</span> alphabet_to_morse<span class="token punctuation">[</span>letter<span class="token punctuation">]</span>            morseword<span class="token punctuation">.</span>append<span class="token punctuation">(</span>morseletter<span class="token punctuation">)</span>        word <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>morseword<span class="token punctuation">)</span>        morsestring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>morsestring<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">morsedecode</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Morse cipher decryption function    Example::        decoded = '1637D'        print(morseencode(decoded))    prints::        .----/-..../...--/--.../-..    """</span>    characterstring <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    words <span class="token operator">=</span> encoded<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>        letters <span class="token operator">=</span> word<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>        characterword <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> letter <span class="token keyword">in</span> letters<span class="token punctuation">:</span>            characterletter <span class="token operator">=</span> morse_to_alphabet<span class="token punctuation">[</span>letter<span class="token punctuation">]</span>            characterword<span class="token punctuation">.</span>append<span class="token punctuation">(</span>characterletter<span class="token punctuation">)</span>        word <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>characterword<span class="token punctuation">)</span>        characterstring<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>characterstring<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Base64 decryption function, dict is the substitute dictionary    Example::        dict = &#123;0: 'J', 1: 'K', 2: 'L', 3: 'M', 4: 'N', 5: 'O', 6: 'x', 7: 'y', 8: 'U', 9: 'V', 10: 'z', 11: 'A', 12: 'B',        13: 'C', 14: 'D', 15: 'E', 16: 'F', 17: 'G', 18: 'H', 19: '7', 20: '8', 21: '9', 22: 'P', 23: 'Q', 24: 'I',        25: 'a', 26: 'b', 27: 'c', 28: 'd', 29: 'e', 30: 'f', 31: 'g', 32: 'h', 33: 'i', 34: 'j', 35: 'k', 36: 'l',        37: 'm', 38: 'W', 39: 'X', 40: 'Y', 41: 'Z', 42: '0', 43: '1', 44: '2', 45: '3', 46: '4', 47: '5', 48: '6',        49: 'R', 50: 'S', 51: 'T', 52: 'n', 53: 'o', 54: 'p', 55: 'q', 56: 'r', 57: 's', 58: 't', 59: 'u', 60: 'v',        61: 'w', 62: '+', 63: '/', 64: '='&#125;        print(morseencode(decoded))    new_dict = &#123;v : k for k, v in dict.items()&#125;    chipertext = 'FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw'    print(my_base64_decode(chipertext, new_dict))    prints::        BJD&#123;D0_Y0u_kNoW_Th1s_b4se_map&#125;    """</span>    res <span class="token operator">=</span> <span class="token string">''</span>    p1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span>    p2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">:</span>        str_p1 <span class="token operator">=</span> encoded<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> encoded<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> encoded<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> encoded<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span>        tmp_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> str_p1<span class="token punctuation">]</span>        tmp_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp_res<span class="token punctuation">)</span>        tmp_res <span class="token operator">=</span> <span class="token punctuation">[</span>tmp_str<span class="token punctuation">[</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp_res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> p2<span class="token punctuation">:</span>        str_p2 <span class="token operator">=</span> encoded<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> p1<span class="token punctuation">:</span><span class="token punctuation">]</span>        tmp_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> str_p2<span class="token punctuation">]</span>        tmp_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp_res<span class="token punctuation">)</span>        tmp_res <span class="token operator">=</span> <span class="token punctuation">[</span>tmp_str<span class="token punctuation">[</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp_res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">shift_encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Shift cipher encryption function    Example::        m = "flag&#123;easy_easy_crypto&#125;"        k = "3124"        c = shift_encrypt(m, k)        print(c)    prints::        lafgea&#123;s_eyay_scyprt&#125;o    """</span>    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp_c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token operator">*</span> l        <span class="token keyword">if</span> i <span class="token operator">+</span> l <span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp_m <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp_m <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> l<span class="token punctuation">]</span>        <span class="token keyword">for</span> kindex <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp_m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp_c<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>kindex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp_m<span class="token punctuation">[</span>kindex<span class="token punctuation">]</span>        c <span class="token operator">+=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp_c<span class="token punctuation">)</span>    <span class="token keyword">return</span> c<span class="token keyword">def</span> <span class="token function">shift_decrypt</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Shift cipher decryption function    Example::        c = 'lafgea&#123;s_eyay_scyprt&#125;o'        k = "3124"        print(shift_decrypt(c, k))    prints::        flag&#123;easy_easy_crypto&#125;    """</span>    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp_m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token operator">*</span> l        <span class="token keyword">if</span> i <span class="token operator">+</span> l <span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp_c <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>            use <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> kindex <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp_c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                use<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>kindex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            use<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> kindex <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp_c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp_m<span class="token punctuation">[</span>kindex<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_c<span class="token punctuation">[</span>use<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>kindex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp_c <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> l<span class="token punctuation">]</span>            <span class="token keyword">for</span> kindex <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp_c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp_m<span class="token punctuation">[</span>kindex<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_c<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>kindex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        m <span class="token operator">+=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp_m<span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">c01248_decode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    01248(yunying) cipher decryption function    Example::        c = "8842101220480224404014224202480122"        print(c01248_decode(c))    prints::        welldone    """</span>    l <span class="token operator">=</span> c<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>    origin <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span>    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> i<span class="token punctuation">:</span>            tmp <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        r <span class="token operator">+=</span> origin<span class="token punctuation">[</span>tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">zhalan_encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    zhalan cipher encryption function    Example::        m = "flag&#123;zhalan_mima_hahaha&#125;"        k = 4        c = zhalan_encrypt(m, k)        print(c)    prints::        f&#123;lm_alzaihhahnmaaga_ah&#125;    """</span>    chip <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">+</span> k <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp_m <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp_m <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span>        chip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp_m<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> tmp_m <span class="token keyword">in</span> chip<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp_m<span class="token punctuation">)</span><span class="token punctuation">:</span>                c <span class="token operator">+=</span> tmp_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> c<span class="token keyword">def</span> <span class="token function">zhalan_decrypt</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    zhalan cipher decryption function    Example::        c = "f&#123;lm_alzaihhahnmaaga_ah&#125;"        k = 4        m = zhalan_encrypt(m, k)        print(m)    prints::        flag&#123;zhalan_mima_hahaha&#125;    """</span>    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    partnum <span class="token operator">=</span> l <span class="token operator">//</span> k    <span class="token keyword">if</span> l <span class="token operator">%</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        partnum <span class="token operator">+=</span> <span class="token number">1</span>    m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token operator">*</span> l    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> partnum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">+</span> partnum <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp_c <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp_c <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> partnum<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp_c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token punctuation">[</span>j <span class="token operator">*</span> k <span class="token operator">+</span> i <span class="token operator">//</span> partnum<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_c<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">variation_zhalan_decode</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    a variation of zhalan cipher decryption function    Example::        string = "NxC_GWj&#125;e&#123;1ohUJn$i0i1?p@oiHz?"        key = 3        m = variation_zhalan_decode(string, key)        print(m)    prints::        Nep&#123;x1@oChoU_JinG$HiW0zij1??&#125;    """</span>    de_key <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> key <span class="token operator">-</span> <span class="token number">2</span>    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">//</span> de_key    r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">%</span> de_key    delist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>        delist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 确定第一个分组</span>    <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        delist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>length<span class="token punctuation">]</span>        s <span class="token operator">=</span> length    <span class="token keyword">else</span><span class="token punctuation">:</span>        delist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        s <span class="token operator">=</span> length <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> key <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> length <span class="token operator">*</span> <span class="token number">2</span>        <span class="token keyword">if</span> r <span class="token operator">></span> i<span class="token punctuation">:</span>            l <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> r <span class="token operator">></span> de_key <span class="token operator">-</span> i<span class="token punctuation">:</span>            l <span class="token operator">+=</span> <span class="token number">1</span>        delist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> string<span class="token punctuation">[</span>s<span class="token punctuation">:</span>s <span class="token operator">+</span> l<span class="token punctuation">]</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> l    delist<span class="token punctuation">[</span>key <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> string<span class="token punctuation">[</span>s<span class="token punctuation">:</span><span class="token punctuation">]</span>    destr <span class="token operator">=</span> <span class="token string">''</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        destr <span class="token operator">+=</span> delist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        delist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> delist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> key <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            j <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> destr<span class="token keyword">def</span> <span class="token function">caesar_encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Caesar cipher encryption function    Example::        m = "flag&#123;kaisamima&#125;"        k = 3        c = caesar_encrypt(m, k)        print(c)    prints::        iodj~ndlvdplpd    """</span>    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        r <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">caesar_decrypt</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Caesar cipher decryption function    Example::        c = "iodj~ndlvdplpd"        k = 3        m = caesar_decrypt(c, k)        print(m)    prints::        iodj~ndlvdplpd    """</span>    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span>        r <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">caesar_brute</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> match_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Caesar brute function    Example::        c = "39.4H/?BA2,0.2@.?J"        print(caesar_brute(c, "flag&#123;"))    prints::        i['flag&#123;kaisamima&#125;']    """</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> caesar_decrypt<span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token keyword">if</span> match_str <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">rot13</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    rot13 decryption/encryption function    Example::        c = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"        print(rot13(c))        print(rot13(rot13(c)))    prints::        2ps24qon5so0n30r26r83o2np5o9r29r1o161r5p1sn7425r73043362938o9824        2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824    """</span>    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">atabsh_encode</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    atabsh encryption/decryption function    Example::        m = "flag&#123;ok_atabsh_flag&#125;"        c = atabsh_encode(m)        print(c)        print(atabsh_encode(c))    prints::        flag&#123;ok_atabsh_flag&#125;        uozt&#123;lp_zgzyhs_uozt&#125;    """</span>    alphabet <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>    Origin <span class="token operator">=</span> alphabet <span class="token operator">+</span> alphabet<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    TH_A <span class="token operator">=</span> alphabet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    TH_a <span class="token operator">=</span> alphabet<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    TH <span class="token operator">=</span> TH_A <span class="token operator">+</span> TH_a    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> Origin<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> TH<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">substitution_encode</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    substitution encryption function    Example::        m = "flag&#123;good_good_study&#125;"        k = "zugxjitlrkywdhfbnvosepmacq"        c = substitution_encode(m, k)        print(c)    prints::        iwzt&#123;tffx_tffx_osexc&#125;    """</span>    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        <span class="token keyword">if</span> origin<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> k<span class="token punctuation">[</span>origin<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">substitution_decode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    substitution decryption function    Example::        c = "iwzt&#123;tffx_tffx_osexc&#125;"        k = "zugxjitlrkywdhfbnvosepmacq"        m = substitution_decode(m, k)        print(m)    prints::        flag&#123;good_good_study&#125;    """</span>    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">if</span> k<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> origin<span class="token punctuation">[</span>k<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">affine_encode</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    affine encryption function    Example::        m = "affinecipher"        a = 5        b = 8        c = affine_encode(m, a, b)        print(c)    prints::        ihhwvcswfrcp    """</span>    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        <span class="token keyword">if</span> origin<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> origin<span class="token punctuation">[</span><span class="token punctuation">(</span>a <span class="token operator">*</span> origin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">affine_decode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    affine decryption function    Example::        c = "ihhwvcswfrcp"        a = 5        b = 8        m = affine_decode(c, a, b)        print(c)    prints::        affinecipher    """</span>    r <span class="token operator">=</span> <span class="token string">""</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span>    ai <span class="token operator">=</span> invert<span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">if</span> origin<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> origin<span class="token punctuation">[</span><span class="token punctuation">(</span>ai <span class="token operator">*</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">+=</span> i    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">affine_guessab</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    affine brute function -> guess a and b    Example::        print(affine_guessab('a', 'i', 'f', 'h'))    prints::        (mpz(5), mpz(8))    """</span>    x1 <span class="token operator">=</span> origin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m1<span class="token punctuation">)</span>    x2 <span class="token operator">=</span> origin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>m2<span class="token punctuation">)</span>    y1 <span class="token operator">=</span> origin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>    y2 <span class="token operator">=</span> origin<span class="token punctuation">.</span>index<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span>    dxi <span class="token operator">=</span> invert<span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">if</span> x1 <span class="token operator">-</span> x2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        dxi <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>    a <span class="token operator">=</span> dxi <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">%</span> n    b <span class="token operator">=</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> a <span class="token operator">*</span> x1<span class="token punctuation">)</span> <span class="token operator">%</span> n    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_cheese_map</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> use_Q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> upper<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    get chess function    Example::        print(gen_cheese_map("helloword"))    prints::        ['HELOW', 'RDABC', 'FGIKM', 'NPQST', 'UVXYZ']    """</span>    k <span class="token operator">=</span> k<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    k0 <span class="token operator">=</span> <span class="token string">""</span>    origin <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> k<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> k0<span class="token punctuation">:</span>            k0 <span class="token operator">+=</span> i    <span class="token keyword">for</span> i <span class="token keyword">in</span> origin<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> k0<span class="token punctuation">:</span>            k0 <span class="token operator">+=</span> i    <span class="token keyword">if</span> use_Q <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        k0 <span class="token operator">=</span> k0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>k0<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> k0<span class="token punctuation">[</span>k0<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        k0 <span class="token operator">=</span> k0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>k0<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Q"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> k0<span class="token punctuation">[</span>k0<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Q"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> upper <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        k0 <span class="token operator">=</span> k0<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>k0<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">25</span>    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k0<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">:</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">_playfair_2char</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    find char of playfair map while encoding    """</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                ai <span class="token operator">=</span> i                aj <span class="token operator">=</span> j            <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                bi <span class="token operator">=</span> i                bj <span class="token operator">=</span> j    <span class="token keyword">if</span> ai <span class="token operator">==</span> bi<span class="token punctuation">:</span>        axi <span class="token operator">=</span> ai        bxi <span class="token operator">=</span> bi        axj <span class="token operator">=</span> <span class="token punctuation">(</span>aj <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>        bxj <span class="token operator">=</span> <span class="token punctuation">(</span>bj <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>    <span class="token keyword">elif</span> aj <span class="token operator">==</span> bj<span class="token punctuation">:</span>        axj <span class="token operator">=</span> aj        bxj <span class="token operator">=</span> bj        axi <span class="token operator">=</span> <span class="token punctuation">(</span>ai <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>        bxi <span class="token operator">=</span> <span class="token punctuation">(</span>bi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        axi <span class="token operator">=</span> ai        axj <span class="token operator">=</span> bj        bxi <span class="token operator">=</span> bi        bxj <span class="token operator">=</span> aj    <span class="token keyword">return</span> <span class="token builtin">map</span><span class="token punctuation">[</span>axi<span class="token punctuation">]</span><span class="token punctuation">[</span>axj<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">map</span><span class="token punctuation">[</span>bxi<span class="token punctuation">]</span><span class="token punctuation">[</span>bxj<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">playfair_encode</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> cheese_map<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    playfair encryption function    Example::        m = "Hide the gold in the tree stump"        k = "playfairexample"        c = playfair_encode(m, k)        print(c)    prints::        ['BM', 'OD', 'ZB', 'XD', 'NA', 'BE', 'KU', 'DM', 'UI', 'XM', 'MO', 'UV', 'IF']    """</span>    m <span class="token operator">=</span> m<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    origin <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>    tmp <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">in</span> origin<span class="token punctuation">:</span>            tmp <span class="token operator">+=</span> i    m <span class="token operator">=</span> tmp    <span class="token keyword">assert</span> k <span class="token operator">!=</span> <span class="token string">""</span> <span class="token keyword">or</span> cheese_map <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> cheese_map <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> gen_cheese_map<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> cheese_map    m0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> m<span class="token punctuation">[</span>idx<span class="token punctuation">:</span>idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            m0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            idx <span class="token operator">+=</span> <span class="token number">2</span>        <span class="token keyword">elif</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"X"</span><span class="token punctuation">:</span>            m0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"X"</span><span class="token punctuation">)</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            m0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"Q"</span><span class="token punctuation">)</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"X"</span><span class="token punctuation">:</span>                m0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"X"</span><span class="token punctuation">)</span>                idx <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                m0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"Q"</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> m0<span class="token punctuation">:</span>        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>_playfair_2char<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">_playfair_2char_decode</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    find char of playfair map while decoding    """</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                ai <span class="token operator">=</span> i                aj <span class="token operator">=</span> j            <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                bi <span class="token operator">=</span> i                bj <span class="token operator">=</span> j    <span class="token keyword">if</span> ai <span class="token operator">==</span> bi<span class="token punctuation">:</span>        axi <span class="token operator">=</span> ai        bxi <span class="token operator">=</span> bi        axj <span class="token operator">=</span> <span class="token punctuation">(</span>aj <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>        bxj <span class="token operator">=</span> <span class="token punctuation">(</span>bj <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>    <span class="token keyword">elif</span> aj <span class="token operator">==</span> bj<span class="token punctuation">:</span>        axj <span class="token operator">=</span> aj        bxj <span class="token operator">=</span> bj        axi <span class="token operator">=</span> <span class="token punctuation">(</span>ai <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>        bxi <span class="token operator">=</span> <span class="token punctuation">(</span>bi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        axi <span class="token operator">=</span> ai        axj <span class="token operator">=</span> bj        bxi <span class="token operator">=</span> bi        bxj <span class="token operator">=</span> aj    <span class="token keyword">return</span> <span class="token builtin">map</span><span class="token punctuation">[</span>axi<span class="token punctuation">]</span><span class="token punctuation">[</span>axj<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">map</span><span class="token punctuation">[</span>bxi<span class="token punctuation">]</span><span class="token punctuation">[</span>bxj<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">playfair_decode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> cheese_map<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    playfair decryption function    Example::        k = "playfairexample"        c = ['BM', 'OD', 'ZB', 'XD', 'NA', 'BE', 'KU', 'DM', 'UI', 'XM', 'MO', 'UV', 'IF']        print(playfair_decode(c, k))    prints::        HIDETHEGOLDINTHETREXESTUMP    """</span>    <span class="token keyword">assert</span> k <span class="token operator">!=</span> <span class="token string">""</span> <span class="token keyword">or</span> cheese_map <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> cheese_map <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> gen_cheese_map<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> cheese_map    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span>        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>_playfair_2char_decode<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">polybius_encode</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"ADFGX"</span><span class="token punctuation">,</span> cheese_map<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    polybius encryption function    Example::        m = "helloworld"        k = "abcd"        c = polybius_encode(m, k)        print(c)    prints::        ['DF', 'AX', 'FA', 'FA', 'FG', 'XD', 'FG', 'GD', 'FA', 'AG']    """</span>    m <span class="token operator">=</span> m<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> k <span class="token operator">!=</span> <span class="token string">""</span> <span class="token keyword">or</span> cheese_map <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> cheese_map <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> gen_cheese_map<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> cheese_map    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> m<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">:</span>                    r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">polybius_decode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"ADFGX"</span><span class="token punctuation">,</span> cheese_map<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    polybius decryption function    Example::        k = "abcd"        c = ['DF', 'AX', 'FA', 'FA', 'FG', 'XD', 'FG', 'GD', 'FA', 'AG']        print(polybius_decode(c, k))    prints::        HELLOWORLD    """</span>    <span class="token keyword">assert</span> k <span class="token operator">!=</span> <span class="token string">""</span> <span class="token keyword">or</span> cheese_map <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> cheese_map <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> gen_cheese_map<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token builtin">map</span> <span class="token operator">=</span> cheese_map    r <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> c<span class="token punctuation">:</span>        i <span class="token operator">=</span> name<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> name<span class="token punctuation">.</span>index<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        r <span class="token operator">+=</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大雾实验报告(持续更新)</title>
      <link href="2021/040745361.html"/>
      <url>2021/040745361.html</url>
      
        <content type="html"><![CDATA[<h2 id="latex模板"><a href="#latex模板" class="headerlink" title="latex模板"></a>latex模板</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">amsmath</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">amsfonts</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">amssymb</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">ctex</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">gensymb</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">fancyhdr</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">graphicx</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">subfigure</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">geometry</span><span class="token punctuation">&#125;</span><span class="token function selector">\geometry</span><span class="token punctuation">&#123;</span>left=2.5cm,right=2.5cm,headsep=2cm<span class="token punctuation">&#125;</span><span class="token function selector">\pagestyle</span><span class="token punctuation">&#123;</span>fancy<span class="token punctuation">&#125;</span><span class="token function selector">\fancyfoot</span><span class="token punctuation">[</span>C<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token function selector">\thepage</span><span class="token punctuation">&#125;</span><span class="token function selector">\fancyhead</span><span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>11系20级3班<span class="token punctuation">&#125;</span><span class="token function selector">\fancyhead</span><span class="token punctuation">[</span>C<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>    <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">huge</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\textbf</span><span class="token punctuation">&#123;</span>实<span class="token function selector">\ </span><span class="token function selector">\ </span><span class="token function selector">\ </span>验<span class="token function selector">\ </span><span class="token function selector">\ </span><span class="token function selector">\ </span>报<span class="token function selector">\ </span><span class="token function selector">\ </span><span class="token function selector">\ </span>告<span class="token punctuation">&#125;</span>    <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">huge</span><span class="token punctuation">&#125;</span><span class="token function selector">\\</span>    <span class="token function selector">\vspace</span><span class="token punctuation">&#123;</span>0.4cm<span class="token punctuation">&#125;</span>    Phoenix XXXXXXX<span class="token punctuation">&#125;</span><span class="token function selector">\fancyhead</span><span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>2021年4月2日<span class="token punctuation">&#125;</span><span class="token function selector">\ctexset</span><span class="token punctuation">&#123;</span>    section=<span class="token punctuation">&#123;</span>        format+ = <span class="token function selector">\zihao</span><span class="token punctuation">&#123;</span>4<span class="token punctuation">&#125;</span> <span class="token function selector">\raggedright</span>,        number = <span class="token function selector">\chinese</span><span class="token punctuation">&#123;</span>section<span class="token punctuation">&#125;</span>,        name = <span class="token punctuation">&#123;</span>,、<span class="token punctuation">&#125;</span>,        aftername = <span class="token function selector">\hspace</span><span class="token punctuation">&#123;</span>2pt<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">实验题目</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">实验目的</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">实验原理</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">实验器材</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">实验设计</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">测量记录</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">分析与讨论</span><span class="token punctuation">&#125;</span>        <span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">数据处理</span><span class="token punctuation">&#125;</span>        <span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">误差分析</span><span class="token punctuation">&#125;</span>        <span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">实验讨论</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">思考题</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单摆法测重力加速度"><a href="#单摆法测重力加速度" class="headerlink" title="单摆法测重力加速度"></a>单摆法测重力加速度</h2><p><img src="https://i.loli.net/2021/04/07/C52hZBsL1IUFqXS.png" alt="1.png"></p><h2 id="自由落体法测重力加速度"><a href="#自由落体法测重力加速度" class="headerlink" title="自由落体法测重力加速度"></a>自由落体法测重力加速度</h2><p><img src="https://i.loli.net/2021/04/07/OCdMnyVgXB69Eis.png" alt="2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大雾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建指南</title>
      <link href="2021/04052690.html"/>
      <url>2021/04052690.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>折腾了一天半，这个个人博客也算大致搭建起来了，还是希望自己能坚持下去。</p><p>首先这个博客的整体搭建是参考这篇文章：<a href="https://godweiyang.com/2018/04/13/hexo-blog/">https://godweiyang.com/2018/04/13/hexo-blog/</a></p><p>前面的内容基本没问题，后面的个性化主题设置不建议看，因为很多都过时了。</p><p>这里讲几个注意点：</p><p>1.Node.js不要下最新版会有一些问题，最好下稳定版。</p><p>2.如果只是想搭个个人博客的话，域名不一定要买。</p><p>3.关于主题，下面详述（我只放我亲测过的东西）。</p><h1 id="Matery主题"><a href="#Matery主题" class="headerlink" title="Matery主题"></a>Matery主题</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-04-03 19:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-04-03 19:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-04-03 19:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-04-03 19:00:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><p>注意按照以上步骤只能支持部分语言的代码高亮，建议在刚才那个下载界面勾选自己所需的语言，下载js文件，将prism.js放到<code>hexo-theme-matery</code> 主题文件夹中的 <code>source/js</code> 中，再在<code>source/layout/layout.ejs</code>文件中加上一段代码即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/prism.js"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span> <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment"># 列表最大高度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>，其中当前路径是主题下的source文件夹，也就是images与medias文件夹同级。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> c_week4<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span> <span class="token number">38539</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-04-04 20:23:10</span><span class="token key atrule">password</span><span class="token punctuation">:</span><span class="token key atrule">summary</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'c/c++'</span><span class="token punctuation">]</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'程序设计'</span><span class="token punctuation">]</span><span class="token key atrule">img</span><span class="token punctuation">:</span> /images/b.jpg<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="个人喜好配置"><a href="#个人喜好配置" class="headerlink" title="个人喜好配置"></a>个人喜好配置</h2><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h3 id="取消主题的背景图遮罩颜色"><a href="#取消主题的背景图遮罩颜色" class="headerlink" title="取消主题的背景图遮罩颜色"></a>取消主题的背景图遮罩颜色</h3><p>定位到<code>themes\hexo-theme-matery\source\css</code>中一个叫matery.css文件的大约600行代码，如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-cover:before,.bg-cover:after</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要将content属性注释掉即可，如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-cover:before,.bg-cover:after</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token comment">/* content: ""; */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加看板娘"><a href="#增加看板娘" class="headerlink" title="增加看板娘"></a>增加看板娘</h3><p>在<code>source/layout/layout.ejs</code>文件中加上三行代码即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="樱花特效"><a href="#樱花特效" class="headerlink" title="樱花特效"></a>樱花特效</h3><p>在 <code>themes/matery/source/js</code> 目录下新建 <code>sakura.js</code> 文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.2.7/source/js/sakura.js">传送门</a>，将内容复制粘贴到 sakura.js 即可。</p><p>然后再 <code>themes/matery/layout/layout.ejs</code> 文件内添加1行代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/sakura.js"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h3><p>直接在<code>themes/matery/layout/layout.ejs</code>文件中添加如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>st<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>hidden<span class="token operator">?</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"ヽ(●-`Д´-)ノ你要玩捉迷藏嘛"</span><span class="token punctuation">,</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"(Ő∀Ő3)ノ好哦！"</span><span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加动态诗词"><a href="#添加动态诗词" class="headerlink" title="添加动态诗词"></a>添加动态诗词</h3><p>采用的是今日诗词，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有API文档，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，在<code>themes/matery/layout/_partial/head.ejs</code>添加下面的一行代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再将<code>themes/matery/layout/_partial/bg-cover-content.ejs</code>中的&lt;%= config.description %&gt;修改为</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%- '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jinrishici-sentence<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>正在加载今日诗词....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>' %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个使用前提是将主题配置文件的subtitle的值改为false。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实搭建个人博客不必急于求成，个人感受如果能够在摸一遍前端之后再回过头来说不定会发现也就这么回事。网络上其实也并不缺少教程，但是很多教程都过时了，因此还需自己慢慢探索。</p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c_week4</title>
      <link href="2021/040438539.html"/>
      <url>2021/040438539.html</url>
      
        <content type="html"><![CDATA[<h1 id="程设作业-week-4"><a href="#程设作业-week-4" class="headerlink" title="程设作业(week 4)"></a>程设作业(week 4)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这可以说是正经发的第一篇博客，就拿程设作业来试试水。其实这是上周作业，但是前两天助教发了一个程序设计规范，我不得不对代码进行重构，sigh！</p><h2 id="A-浮点数的幂"><a href="#A-浮点数的幂" class="headerlink" title="A.浮点数的幂"></a>A.浮点数的幂</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><table><thead><tr><th>Time limit: 10000 ms</th></tr></thead><tbody><tr><td>Memory limit: 256 MB</td></tr><tr><td>Standard I/O</td></tr></tbody></table><p>给定一个 <strong>正浮点数F</strong> 和一个 <strong>正整数n</strong> ，其中：</p><ol><li>F包括小数点固定有“六位”，它会被写成0.1234或 .12300或 00123. 的形式；小数点一定存在，允许前导零、后导零、前导或后导小数点的存在，数值位不会全零。</li><li>n取值范围为1到10（含边界）。<br>求F的n次方的精确值。</li></ol><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入有若干行（不给出具体数目），每行依次包含：</p><ol><li>F，占6列；</li><li>一个空格；</li><li>n，占两列，右对齐，数值不足两列（1到9）用空格补充。</li></ol><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出包括若干行，每行包括一个F的n次方的精确值，但：</p><ol><li>前导零和后导零应被清除，如012.340应以12.34输出；但0.0123应以.0123输出。</li><li>后导小数点应被清除，如12. 应以12输出；但前导小数点，如 .12，必须保留。</li></ol><p><strong>【数据说明】</strong><br>你将被测试所有的输入组合，祝你好运。<br>这里我们强烈建议你使用C的输入输出函数，特别是逐字符输入输出，而非C++的流输入输出。 <strong>你将被分配每个数据点10s的运行时间。</strong><br>函数：</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">#include&lt;stdio.h&gt;int getchar(void);int putchar(int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以逐字符从stdin读取/向stdout输出字符，一般来讲，它比我们常用的scanf要快。但本题的时限应该足以让你使用scanf通过。</p><p>在未知数据组数时如何依次读取：</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">char str[10];int n;while (scanf(&quot;%s%d&quot;, str, &amp;n) &#x3D;&#x3D; 2)&#123;    solve();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">char ch;while ((ch &#x3D; getchar()) !&#x3D; EOF)&#123;    ......&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>请在 <a href="https://zh.cppreference.com/w/c">https://zh.cppreference.com/w/c</a> 查阅关于scanf或getchar返回值的信息，以及宏定义EOF。对于后一种使用getchar()的代码，小心每行的回车符。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-none"><code class="language-none">6.7592  998.999 1000001.  4.00001  4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-none"><code class="language-none">29448126.76412102161816443020690903717327667290429072743629540498.1075960194566517745610440100011.00000000000000000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">int</span> cnt_dot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt_dot <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">++</span>cnt_dot<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// find the decimal place</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">></span> cnt_dot<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        num<span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt_dot<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        num<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    cnt_dot <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> cnt_dot<span class="token punctuation">;</span>    cnt_dot <span class="token operator">*=</span> n<span class="token punctuation">;</span><span class="token comment">// cnt_dot is the decimal places of the final result</span>    ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//ans[0] is the length,store from ans[1]</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// multiply a and b, result is stored in b</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_tmp<span class="token punctuation">,</span> len <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    len_tmp <span class="token operator">=</span> len <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len_tmp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//Processing carry</span>        tmp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>len_tmp<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> len_tmp <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">--</span>len_tmp<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> len_tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len_tmp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// a^exp,the result is stored in ans</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>exp<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">mul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">></span> cnt_dot<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token comment">//print integer part</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token operator">++</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> cnt_dot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// print decimal part</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cnt_dot<span class="token punctuation">;</span> i <span class="token operator">>=</span> start<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pow</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这题大致思路是将浮点数的幂转化为高精度乘法，关键是对小数点的处理，以及前缀和后缀的0的输出处理。我并未对这个代码进行任何优化，OJ上跑的时间是13s（毕竟所有数据全输出来也有几十兆）。实际上还是有一些优化思路的，比如说高精压位和快速幂。说到这里就不得不提到课程群里的一些大佬用一些高超的技巧（如FFT(快速傅里叶变换)，手写int128等）对这题进行面向数据（自行体会）编程，最终一位大佬极限的速度是653ms，计科中人竟恐怖如斯！</p><p>为什么代码中会有塑料英语呢，这一点后面会解释。（捂脸）</p><h2 id="B-函数：统计字符串出现次数"><a href="#B-函数：统计字符串出现次数" class="headerlink" title="B.函数：统计字符串出现次数"></a>B.函数：统计字符串出现次数</h2><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>输出每行出现某字符串的次数 每行最多50个字符。</p><h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入n（n&gt;=2）行，第一行为要统计的目标字符串，剩下的n-1行为需要对其进行统计的多行字符串.</p><h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出该字符串在每行出现的次数。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-none"><code class="language-none">ababcabaabab qekgd aba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-none"><code class="language-none">23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><pre class="line-numbers language-none"><code class="language-none">aaaaaaaaaaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><pre class="line-numbers language-none"><code class="language-none">34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">,</span> word<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len_w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> all_end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> line_end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// read one word</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    len_w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string">'\n'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        word<span class="token punctuation">[</span>len_w<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    word<span class="token punctuation">[</span>len_w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>line_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>line_end <span class="token operator">=</span> all_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_s <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>all_end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        line_end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>line_end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len_w <span class="token operator">-</span> len_s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// count the number of occurrences</span>                <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len_s<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// not the same</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>all_end<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>我为什么会写出这么屑的代码呢，一个是OJ比较屑，gets都用不了，另一个原因是寒假也没碰过c/c++，吃饭的手艺还是不能忘啊。下面放上代码评分规范。</p><h2 id="代码规范评分标准"><a href="#代码规范评分标准" class="headerlink" title="代码规范评分标准"></a>代码规范评分标准</h2><h3 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h3><h4 id="1-1适用范围"><a href="#1-1适用范围" class="headerlink" title="1.1适用范围"></a>1.1适用范围</h4><p>本标准仅适用于C或C++ 语言的编程形式的作业。学生的上机题和大作业等一切编程形式的作业均计入代码规范的考核。</p><h4 id="1-2-分数占比"><a href="#1-2-分数占比" class="headerlink" title="1.2 分数占比"></a>1.2 分数占比</h4><p>学生的代码规范成绩，共占并独占总评的5/100分。</p><h4 id="1-3-计算方法"><a href="#1-3-计算方法" class="headerlink" title="1.3 计算方法"></a>1.3 计算方法</h4><p>1）对代码风格的评价以题目为单位。<br>2）只要有AC提交的题目，不论是否超出该章节的最高满分，均进行考核；未有AC(Accepted)提交的题目，不做评分。<br>（比如，某章上机满分20分，共“A、B、C、D”4题，一题10分；某学生AC过A、C、D题，B题有过提交但没有AC，则他的A、C、D题会进行代码风格的评分）<br>3）对于单个题目的多次AC提交代码，选择代码风格最好的一个，作为该题目的风格得分。<br>学生最后的代码规范成绩，为所有被考核的“题目”的代码风格分平均。学生每个题目的代码风格成绩取0 ~ 5（含边界）的整数，单个题目满分5分，每个细则项可得0或1分；总分为题目得分的平均，满分5分，以精确小数值加入总评的计算。<br>（比如，某学生一学期的题目提交情况与代码风格成绩如下表，空单元格代表未AC：</p><table><thead><tr><th align="center">第一章</th><th></th><th></th><th>第二章</th><th></th><th>第三章</th><th></th><th></th><th></th><th>总分</th></tr></thead><tbody><tr><td align="center">A</td><td>B</td><td>C</td><td>A</td><td>B</td><td>A</td><td>B</td><td>C</td><td>D</td><td></td></tr><tr><td align="center">5</td><td></td><td>4</td><td>3</td><td></td><td>3</td><td>4</td><td></td><td></td><td>3.8</td></tr></tbody></table><p>总分3.8分等于(5+4+3+3+4)÷5，空值不计入平均计算。）</p><h4 id="1-4-评分原则"><a href="#1-4-评分原则" class="headerlink" title="1.4 评分原则"></a>1.4 评分原则</h4><p>为严格要求和引导学生养成良好的编程习惯，同时为成绩评价留有一定的宽松，对每个评分小点，既要严格要求其达到的效果，又对学生的学习过程留有循序渐进的余地；代码风格评判会在严格的评价标准上，结合题目实际，合情合理要求。</p><h3 id="2-评分细则"><a href="#2-评分细则" class="headerlink" title="2.评分细则"></a>2.评分细则</h3><p>关于本细则涉及的语言要求（只能使用英语命名和注释），学生可以从任何程度上借鉴翻译引擎的结果，在保证表意清晰的前提下，允许英语用词和用句的不规范。<br>关于本细则的格式要求，学生可以借鉴IDE等代码编辑器自带的自动格式化工具。</p><h4 id="2-1-缩进、括号、分行与空格（1分）"><a href="#2-1-缩进、括号、分行与空格（1分）" class="headerlink" title="2.1 缩进、括号、分行与空格（1分）"></a>2.1 缩进、括号、分行与空格（1分）</h4><p>以下细则，以学生每部分、每条代码语句的美观性，代码结构的工整性，作为根本评价依据；在每个方面的整体上符合、关键原则上符合、细节上不完全符合，但代码美观性和工整得到保障的，可以得分。<br>对于应当划在本方面的未尽条目，均以美观和工整的要求酌情评判。</p><h5 id="2-1-1-缩进与大括号"><a href="#2-1-1-缩进与大括号" class="headerlink" title="2.1.1 缩进与大括号"></a>2.1.1 缩进与大括号</h5><p>1）学生的代码应以4个空格（或显示为4个字符缩进量的制表符tab）进行缩进。凡是以大括号（{，}）括起的代码块均需缩进。<br>2）分割代码块、函数体、结构体的大括号（{，}），前大括号允许单独分行或紧接块代码之后，二者择一适用；后大括号单独成行。单独分行的前或后大括号自身必须与前一代码块的缩进一致。<br>即，或者使用格式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用格式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种格式在同一代码不得混用。<br>3）if-else分支结构，由于受“最近匹配”原则所可能引起的歧义，只要有if{if-else}else类型的嵌套的，无论下含几条语句，外层均必须使用大括号；switch-case分支结构，case后的处理语句必须缩进，建议添加大括号（下面的例子也可以使用另一种大括号的换行方式）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>score <span class="token operator">!=</span> s2<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// this parentheses is critical</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>score <span class="token operator">></span> s2<span class="token punctuation">.</span>score<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>id <span class="token operator">!=</span> s2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// so does this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span>id <span class="token operator">></span> s2<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-2-分行"><a href="#2-1-2-分行" class="headerlink" title="2.1.2 分行"></a>2.1.2 分行</h5><p>对于较长的行、表达式等，应以分行的方式书写每个部分；典型的如条件表达式和选择（? : ）表达式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span> <span class="token operator">||</span>    ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span> <span class="token operator">||</span>    ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ch <span class="token operator">=</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">?</span> ch <span class="token operator">:</span> <span class="token punctuation">(</span>         <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">?</span> ch <span class="token operator">+</span> <span class="token number">36</span> <span class="token operator">:</span>        <span class="token comment">/*ch >= '0' &amp;&amp; ch &lt;= '9'*/</span>  ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-3-小括号"><a href="#2-1-3-小括号" class="headerlink" title="2.1.3 小括号"></a>2.1.3 小括号</h5><p>对于多算符混合使用在同一表达式（包括运算、大小比较、逻辑连接、位运算、赋值、指针引用和解除引用等），除了特别明显、符合数学常识的，有运算次序的组合（与、或、非混用，加减和乘除混用），可以不用括号括起来，其他的均要有括号标识运算顺序和逻辑组合，包括但不限于：<br>1）位运算（&lt;&lt;，&gt;&gt;，&amp;，|，<del>，^）与加减乘除运算混合<br>2）位运算（&lt;&lt;，&gt;&gt;，&amp;，|，</del>，^）与逻辑运算（||,&amp;&amp;,!,!=,==）混合<br>3）赋值（=,+=,-=等）与逻辑运算（||,&amp;&amp;,!,!=,==）混合，比如</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）指针引用、解引用，结构体成员算符(-&gt;，.)与逻辑运算、递增递减运算（++，–）等混合。虽然：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur<span class="token operator">++</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是常用的组合，但是不如写成：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>cur<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）指针引用、解引用与结构体成员算符（-&gt;，.）混合<br>6）选择运算符（? : ）<br>总之，在不能明确表明计算顺序的地方，都要有括号。</p><h5 id="2-1-4-空格"><a href="#2-1-4-空格" class="headerlink" title="2.1.4 空格"></a>2.1.4 空格</h5><p>在算符，逗号等，应使用一个空格分开，保证显示的工整与美观。（for、if等关键字之后，不单独分行的大括号之前等，也建议添加空格）<br>除非，对于诸如长表达式的多级运算符混用时，（在添加了括号的前提下）为了展现运算符优先级结合而选择部分紧凑（如下x=表达式，?:表达式）,然而我们依旧建议添加全部的空格。学生可以借鉴编辑器自带的格式化工具的结果。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// there is a space before '&#123;'</span>    <span class="token keyword">int</span>  x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token punctuation">,</span> t<span class="token punctuation">;</span> <span class="token comment">// As problem description indicates</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// there are spaces after for and before &#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> x<span class="token operator">*</span>y <span class="token operator">+</span> y<span class="token operator">*</span>c <span class="token operator">-</span> c<span class="token operator">/</span>t<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> c <span class="token operator">||</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// spaces before and after ?: are optional, as there are brackets.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"yes?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-函数头与结构体注释（1分）"><a href="#2-2-函数头与结构体注释（1分）" class="headerlink" title="2.2 函数头与结构体注释（1分）"></a>2.2 函数头与结构体注释（1分）</h4><p>本条目，以是否充分说明函数参数、返回值与结构体成员的意义，作为根本评判依据。意义和用途，（返回值的）一般情况和特殊情况都有涉及，基本可以理解的，可以得分。<br>对于应当划在本方面的未尽条目，均以意义说明完整、明确、规范与充分的要求酌情评判。</p><h5 id="2-2-1-首要原则"><a href="#2-2-1-首要原则" class="headerlink" title="2.2.1 首要原则"></a>2.2.1 首要原则</h5><p>凡是违反本条目下子条目的，扣除本大项的1分：<br>1）注释不允许除英文、伪代码和C表达式以外的其他任何表述方式！包括但不限于汉字、汉语拼音、法语等除英语以外的外语。<br>2）大量充斥着下面明确说明过不应写出的、从代码上可以显然易见的内容。</p><h5 id="2-2-2-函数头注释"><a href="#2-2-2-函数头注释" class="headerlink" title="2.2.2 函数头注释"></a>2.2.2 函数头注释</h5><p>函数头注释应当：<br>1）针对函数的目的，描述函数的作用、副作用和效果。副作用如哪些参数在函数内的改变会影响到函数外（“交换”、“插入”等同类词语也可），如会输出什么等。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * function: insert data with DATATYPE into a single-linking head-noded L, *           and the new node appears just after header-node. * return value: a pointer to the new node. */</span><span class="token keyword">struct</span> <span class="token class-name">link_node</span><span class="token operator">*</span> <span class="token function">link_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">link</span><span class="token operator">*</span> L<span class="token punctuation">,</span> DATATYPE data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">link_node</span><span class="token operator">*</span> new_node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">link_node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    new_node<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    new_node<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token operator">-></span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    L<span class="token operator">-></span>head<span class="token operator">-></span>next <span class="token operator">=</span> new_node<span class="token punctuation">;</span>    <span class="token keyword">return</span> new_node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）在返回值不是void时，描述函数返回值的可能性及其对应的含义。同时建议但不强求：对于可能出现的“错误”(内存不足、读取文件尾)会导致什么返回值或其他“标志变量”的设置，也一并注释。（对于返回值应当说明什么，参阅<a href="https://en.cppreference.com/w/c">https://en.cppreference.com/w/c</a> 中对标准库函数的说明。）<br>（比如，strcmp在返回正数、零和负数时分别表示前一字符串大于、等于、小于后一字符串；scanf在返回非负整数时表示正常读取了多少个变量，返回EOF表示在成功读取任何参数之前遇到了文件尾；只要遇到文件尾，feof、ferror会被设置。）<br>3）必要时，如函数头的参数类型与实际使用的类型不同时，补充说明参数变量的实际意义；但在函数定义中可以直接看出的内容，如参数类型、返回值类型、函数名称等，不应出现在注释里。<br>（比如，用于qsort的comp函数的参数是void*类型，但被使用为指向自定义的struct的指针；泛化的定义被局限在特定的使用，需要注释说明）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> p1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> p2<span class="token punctuation">)</span><span class="token comment">/** * Introduction:  * Compares two Student objects by score and id. Higher score means "smaller" and vice versa.  * When two student share scores, "smaller" id means "smaller" and vice versa.  * Two Student objects are "equal" only when they share both scores and ids.  *  * Parameters:  * const void * p1, const void * p2, two pointers to Student objects to be compared.  *  * Return value:  * -1 if *p1 is "smaller than" *p2 * 0 if *p1 "equals to" *p2  * 1 if *p2 is "smaller than" *p1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）必要时，对参数有一定假设的，补充说明该假设；并说明假设不被满足时，会有什么后果。<br>（比如，memcpy要求两个内存范围没有实际的重叠，也不会检查是否重叠；如果重叠了，效果是未定义的，而一般会产生错误）</p><h5 id="2-2-3-结构体注释"><a href="#2-2-3-结构体注释" class="headerlink" title="2.2.3 结构体注释"></a>2.2.3 结构体注释</h5><p>结构体的注释应当表明：<br>1）结构体的用途（如，链表的结点结构体）<br>2）当归属于某一大类数据结构时，属于哪一特定的种类（链表是单链表还是循环链表、是双向链表还是双向循环链表）<br>3）结构体成员的意义（链表的头结点）；即使是OJ题目描述暗示的命名，也应当有所叙述。<br>4）必要时，说明对成员取值范围或其他类型的假定；并说明假定不能满足时的后果。（如，成绩score成员的取值是0到100）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span> DATATYPE<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">link_node</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     * node type of linking list,     * with DATATYPE as datatype.     */</span>    DATATYPE data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">link_node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">link</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     * single linking link list,     * with header node BUT without tail node.     */</span>    <span class="token keyword">struct</span> <span class="token class-name">link_node</span><span class="token operator">*</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     * information of students.     * member:     *   name: as problem description indicates     *   id: as problem description indicates     *   score: from 0 to 100     */</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但结构体的注释不应当包含成员名称、成员数据类型等从代码显而易见的内容。</p><h4 id="2-3函数、变量、常量与结构体及其成员的命名（1分）"><a href="#2-3函数、变量、常量与结构体及其成员的命名（1分）" class="headerlink" title="2.3函数、变量、常量与结构体及其成员的命名（1分）"></a>2.3函数、变量、常量与结构体及其成员的命名（1分）</h4><p>本条目，以是否满足命名风格（格式）的要求，且是否足够“望文生义”，作为根本评判依据。命名格式按下述条目严格要求；意义是否清晰应当结合变量命名与相关注释，一并评价。<br>对于应当划在本方面的未尽条目，均以含义显然、格式规范的要求酌情评判。</p><h5 id="2-3-1-命名格式"><a href="#2-3-1-命名格式" class="headerlink" title="2.3.1 命名格式"></a>2.3.1 命名格式</h5><p>1）常量命名，包括 #define和const两种常量，均只能使用“大写单词（缩写）+下划线”的形式，如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_STUD_NUM</span> <span class="token expression"><span class="token number">200000</span></span></span><span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）变量、结构体、结构体成员和函数命名，推荐使用“纯小写单词（缩写）+下划线”格式（Linux格式）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> stud_score<span class="token punctuation">;</span><span class="token keyword">char</span> stud_id<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用（大/小）驼峰命名：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> studScore<span class="token punctuation">;</span> <span class="token comment">// 小驼峰</span><span class="token keyword">char</span> StudId<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 大驼峰</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）允许以下划线开头并紧跟着以大写字母开头单词的形式命名结构体，并在随后使用typedef：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-2-命名含义"><a href="#2-3-2-命名含义" class="headerlink" title="2.3.2 命名含义"></a>2.3.2 命名含义</h5><p>任何变量、常量、函数、结构体及其成员的名称都应可以直接或比较明白地反映其用途、含义。对于使用单词缩写进行命名的，应当使用适当的注释表明整体意义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> stud_score<span class="token punctuation">;</span> <span class="token comment">// student score</span><span class="token keyword">char</span> StudId<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// student identification number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用缩写但意义显露不充分，且没有注释的，酌情处理。<br>绝不被允许的命名行为包括：<br>1）使用汉语拼音的命名<br>2）单个字母一类的命名，如a2、b1、c、d等。但如果为了表达常见的数学意义（如x、y、x1），或为了与题目描述一致，或是短小函数或代码段内的常见命名（如使用s指字符串，数值函数的参数x和y，或比较函数的参数a和b），只要是有任何形式的相关注释注解的，可以允许。<br>3）在上一条目的基础上，单个字母变量用于循环迭代的，限定在i、j、k三层；循环多层的，应对每个循环变量的含义予以说明。<br>此外，本细则不强制要求，但推荐使用英文短单词（单音节）的缩写而非全拼（如index，open），推荐不使用下划线甚至双下划线开头的变量命名；因为上述命名时常与C库函数、宏重名。这类变量名一般较为庞杂，初学者不易记忆，暂不规定。<br>对于这类短单词缩写，常见的如ind代index，tot代total，num代number；更推荐的命名方式为与其他含义结合，如stud_num（number of students）等。</p><h4 id="2-4-代码模块化与逻辑注释（1分）"><a href="#2-4-代码模块化与逻辑注释（1分）" class="headerlink" title="2.4 代码模块化与逻辑注释（1分）"></a>2.4 代码模块化与逻辑注释（1分）</h4><p>本条目，以是否清晰展现代码的内在逻辑、执行意义和过程，作为根本评判标准。对于较为短小、步骤较少的代码，在注释、模块划分、使用多种函数等方面不够完美的，只要其逻辑表述充分、运算的目的清楚说明了的，不必深究。对于较长的代码块，有注释注解代码流程，基本清楚的，可以得分。<br>以下各条目应从代码逻辑的易懂性来直观评判，代码易懂的，可以得分；代码不易理解的，可以酌情扣分。<br>对于应当划在本方面的未尽条目，均以代码逻辑清晰与否，酌情评判。</p><h5 id="2-4-1-代码块逻辑"><a href="#2-4-1-代码块逻辑" class="headerlink" title="2.4.1 代码块逻辑"></a>2.4.1 代码块逻辑</h5><p>对于较长的代码/函数段，应使用分行、单行与多行注释等形式，进行划分，并注明代码块的执行过程、目的等。</p><h5 id="2-4-2-循环逻辑"><a href="#2-4-2-循环逻辑" class="headerlink" title="2.4.2 循环逻辑"></a>2.4.2 循环逻辑</h5><p>循环的进入、成功迭代、失败迭代，每次迭代所做的工作等，应有注释予以解释。</p><h5 id="2-4-3-分支逻辑"><a href="#2-4-3-分支逻辑" class="headerlink" title="2.4.3 分支逻辑"></a>2.4.3 分支逻辑</h5><p>以何种情况进入分支，进入分支对应怎样的变量取值行为，及其对应的实际意义。</p><h5 id="2-4-4-运算逻辑"><a href="#2-4-4-运算逻辑" class="headerlink" title="2.4.4 运算逻辑"></a>2.4.4 运算逻辑</h5><p>对于冗长的表达式，包括逻辑判断表达式（if内或while内），运算和赋值表达式，其所要运算或判断的内容，不显然的，应予以说明。</p><h5 id="2-4-5-变量使用逻辑"><a href="#2-4-5-变量使用逻辑" class="headerlink" title="2.4.5 变量使用逻辑"></a>2.4.5 变量使用逻辑</h5><p>对于变量，特别是布尔标志变量（flag等），数组变量（特别是在其某个元素拥有不同的职能，比如将字符串存储为下标从1开始，而下标0的元素存储长度信息），结构体成员；其以什么含义来进行使用，在何种情况下有怎样可能的值的变化的，应在注释里无所不谈。</p><h4 id="2-5-变量、常数与函数的使用（1分）"><a href="#2-5-变量、常数与函数的使用（1分）" class="headerlink" title="2.5 变量、常数与函数的使用（1分）"></a>2.5 变量、常数与函数的使用（1分）</h4><p>本细则涉及变量、常数的使用中应当避免的做法，以及函数编写时应当避免的写法。这些写法或者使得程序出现未定义的危险行为，或者使得程序易错。<br>由于这里的诸多条目与程序的正确性息息相关，而评判的程序为正确程序，故在“规范性”上划分为“可限制”和“不允许”两种。凡是出现“不允许”的代码写法，均扣分；凡是出现“可限制”写法较多的，才考虑扣分；出现大量需要引起注意的写法时，学生应自行考虑其对程序正确性的影响。</p><h5 id="2-5-1-不允许的写法"><a href="#2-5-1-不允许的写法" class="headerlink" title="2.5.1 不允许的写法"></a>2.5.1 不允许的写法</h5><p>1）对任何指针变量的定义处不立即，或邻近语句处不立即初始化的<br>2）类型不同的浮点数（任何不明确指出类型的浮点常量都是double类型）相互进行大小比较的<br>3）非void返回值的函数，可以到达无return值的语句分支的（main函数返回0除外，这是C的标准所规定的）</p><h5 id="2-5-2-可限制的写法"><a href="#2-5-2-可限制的写法" class="headerlink" title="2.5.2 可限制的写法"></a>2.5.2 可限制的写法</h5><p>1）对同类型浮点数使用 ==，&gt;=，&lt;= 等比较运算符的（推荐使用fabs(x-y)&lt;epsilon一类的写法判断浮点数的相等）<br>2）在多个函数之间滥用全局变量交换信息的（递归函数可以视情况例外，但较大的全局数组依旧建议以指针参数的形式传递给函数）<br>3）使用goto语句的（用于一次性跳出多层循环的除外）</p><h5 id="2-5-3-不作为扣分点，但需要引起注意的写法"><a href="#2-5-3-不作为扣分点，但需要引起注意的写法" class="headerlink" title="2.5.3 不作为扣分点，但需要引起注意的写法"></a>2.5.3 不作为扣分点，但需要引起注意的写法</h5><p>1）在指明变量大小（sizeof）处使用数值常量的。（如malloc(n<em>sizeof(int))就不能写成malloc(n</em>4)），这会影响学生代码的可移植性。<br>2）有符号整数的负数取值与无符号整数之间混合运算的<br>3）函数形式参数与实际参数类型不匹配的；特别是对于scanf、printf等可变参数函数，以及涉及不同种指针类型的参数的（将void*指针与其它类型的指针相互赋值除外）。（关于库函数的参数类型，以及类型与scanf格式化字符串对照写法，请参阅<a href="https://en.cppreference.com/w/c%EF%BC%89">https://en.cppreference.com/w/c）</a><br>4）非指针变量的定义处，作为累加用不初始化的，或临近语句处不立即赋初始值的，或变量的定义距离其使用过远的。（C允许在任何代码块定义局部变量，包括for (int i = 0; i &lt; n; i++)）</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>introduction</title>
      <link href="2021/04036818.html"/>
      <url>2021/04036818.html</url>
      
        <content type="html"><![CDATA[<h1 id="微速前进"><a href="#微速前进" class="headerlink" title="微速前进"></a>微速前进</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>搭建这个博客可以说是一时兴起，也不知道能坚持多久，但是我会把这里当成一个家，记录下奋斗过的足迹。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>更新内容包括但不限于CTF知识、工具（脚本）、题解，本科课程相关题解、杂文、随笔等（比如大物实验报告？大作业开源？）。</p>]]></content>
      
      
      <categories>
          
          <category> 总览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 综述 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
